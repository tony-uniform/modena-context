/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { Cart, CartUpdate } from '../../models/cart';
import { executeRequest, QueryParam } from '../../shared/utils/common-types';
import { ApiRequest } from '../../shared/utils/requests-utils';
export declare class ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
            key: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
            key: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    /**
     *	Returns a cart by its key from a specific Store. The {storeKey} path parameter maps to a Store's key.
     *	If the cart exists in the commercetools project but does not have the store field,
     *	or the store field references a different store, this method returns a ResourceNotFound error.
     *	The cart may not contain up-to-date prices, discounts etc.
     *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
     *
     */
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Cart>;
    /**
     *	Updates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
     *	If the cart exists in the commercetools project but does not have the store field,
     *	or the store field references a different store, this method returns a ResourceNotFound error.
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: CartUpdate;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Cart>;
    delete(methodArgs: {
        queryArgs: {
            dataErasure?: boolean;
            version: number;
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Cart>;
}
