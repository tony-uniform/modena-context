/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { CustomerDraft, CustomerPagedQueryResponse, CustomerSignInResult } from '../../models/customer';
import { executeRequest, QueryParam } from '../../shared/utils/common-types';
import { ApiRequest } from '../../shared/utils/requests-utils';
import { ByProjectKeyCustomersEmailConfirmRequestBuilder } from '../confirm/by-project-key-customers-email-confirm-request-builder';
import { ByProjectKeyCustomersEmailTokenRequestBuilder } from '../email-token/by-project-key-customers-email-token-request-builder';
import { ByProjectKeyCustomersPasswordTokenRequestBuilder } from '../password-token/by-project-key-customers-password-token-request-builder';
import { ByProjectKeyCustomersPasswordRequestBuilder } from '../password/by-project-key-customers-password-request-builder';
import { ByProjectKeyCustomersPasswordResetRequestBuilder } from '../reset/by-project-key-customers-password-reset-request-builder';
import { ByProjectKeyCustomersByIDRequestBuilder } from './by-project-key-customers-by-id-request-builder';
import { ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder } from './by-project-key-customers-email-token-by-email-token-request-builder';
import { ByProjectKeyCustomersKeyByKeyRequestBuilder } from './by-project-key-customers-key-by-key-request-builder';
import { ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder } from './by-project-key-customers-password-token-by-password-token-request-builder';
export declare class ByProjectKeyCustomersRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    withPasswordToken(childPathArgs: {
        passwordToken: string;
    }): ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder;
    withEmailToken(childPathArgs: {
        emailToken: string;
    }): ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder;
    /**
     *	To verify a customer's email, an email token can be created. This should be embedded in a link and sent to the
     *	customer via email. When the customer clicks on the link, the "verify customer's email" endpoint should be called,
     *	which sets customer's isVerifiedEmail field to true.
     *
     */
    emailToken(): ByProjectKeyCustomersEmailTokenRequestBuilder;
    emailConfirm(): ByProjectKeyCustomersEmailConfirmRequestBuilder;
    password(): ByProjectKeyCustomersPasswordRequestBuilder;
    passwordReset(): ByProjectKeyCustomersPasswordResetRequestBuilder;
    /**
     *	The following workflow can be used to reset the customer's password:
     *
     *	* Create a password reset token and send it embedded in a link to the customer.
     *	* When the customer clicks on the link, the customer is retrieved with the token.
     *	* The customer enters a new password and the "reset customer's password" endpoint is called.
     *
     */
    passwordToken(): ByProjectKeyCustomersPasswordTokenRequestBuilder;
    withKey(childPathArgs: {
        key: string;
    }): ByProjectKeyCustomersKeyByKeyRequestBuilder;
    withId(childPathArgs: {
        ID: string;
    }): ByProjectKeyCustomersByIDRequestBuilder;
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<CustomerPagedQueryResponse>;
    /**
     *	Creates a customer. If an anonymous cart is passed in,
     *	then the cart is assigned to the created customer and the version number of the Cart will increase.
     *	If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: CustomerDraft;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<CustomerSignInResult>;
}
