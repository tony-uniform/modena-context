"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const errors_1 = __importDefault(require("./errors"));
class TagsOnEntryValidator {
    constructor(tags) {
        this.hooks = [__1.ApiHook.SaveEntry];
        this.tags = tags;
    }
    validate(entry) {
        const errors = [];
        const tagsOnEntry = entry.tags;
        const allTags = this.tags;
        if (!tagsOnEntry) {
            return errors;
        }
        // TODO: Make this more verbose and collect one error for every
        // missing tag
        const allTagsOnEntryExist = tagsOnEntry.every((tag) => {
            const tagId = tag.sys.id;
            return allTags.has(tagId);
        });
        if (!allTagsOnEntryExist) {
            errors.push({
                type: 'InvalidAction',
                message: errors_1.default.entry.TAGS_DO_NOT_EXIST(entry.id)
            });
        }
        return errors;
    }
}
exports.default = TagsOnEntryValidator;
//# sourceMappingURL=tags-on-entry.js.map