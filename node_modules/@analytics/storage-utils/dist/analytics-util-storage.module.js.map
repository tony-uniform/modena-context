{"version":3,"file":"analytics-util-storage.module.js","sources":["../src/utils/parse.js","../src/index.js"],"sourcesContent":["import { isObject } from '@analytics/type-utils'\n/**\n * Safe JSON parse\n * @param  {*} input - value to parse\n * @return {*} parsed input\n */\nexport default function parse(input) {\n  let value = input\n  try {\n    value = JSON.parse(input)\n    if (value === 'true') return true\n    if (value === 'false') return false\n    if (isObject(value)) return value\n    if (parseFloat(value) === value) {\n      value = parseFloat(value)\n    }\n  } catch (e) { }\n  if (value === null || value === \"\") {\n    return\n  }\n  return value\n}\n","import { set, get, remove, globalContext } from '@analytics/global-storage-utils'\nimport { getCookie, setCookie, removeCookie, hasCookies } from '@analytics/cookie-utils'\nimport { hasLocalStorage } from '@analytics/localstorage-utils'\nimport { isUndefined, isString } from '@analytics/type-utils'\nimport parse from './utils/parse'\n\n// Constants\nexport const ALL = '*'\nexport const ANY = 'any'\nexport const LOCAL_STORAGE = 'localStorage'\nexport const COOKIE = 'cookie'\nexport const GLOBAL = 'global'\n\n// Verify support\nconst hasStorage = hasLocalStorage()\nconst hasCookiesSupport = hasCookies()\n\n/**\n * Get storage item from localStorage, cookie, or window\n * @param  {string} key - key of item to get\n * @param  {object|string} [options] - storage options. If string location of where to get storage\n * @param  {string} [options.storage] - Define type of storage to pull from.\n * @return {Any}  the value of key\n */\nexport function getItem(key, options) {\n  if (!key) return\n  const type = getStorageType(options)\n  const getFirst = !useAll(type)\n\n  /* 1. Try localStorage */\n  const localValue = useLocal(type) ? parse(localStorage.getItem(key)) : undefined\n  if (getFirst && !isUndefined(localValue)) {\n    return localValue\n  }\n\n  /* 2. Fallback to cookie */\n  const cookieVal = useCookie(type) ? parse(getCookie(key)) : undefined\n  if (getFirst && cookieVal) {\n    return cookieVal\n  }\n\n  /* 3. Fallback to window/global. */\n  const globalValue = get(key)\n\n  return getFirst ? globalValue : {\n    localStorage: localValue,\n    cookie: cookieVal,\n    global: globalValue\n  }\n}\n\n/**\n * Store values in localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {*} value - value of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n * @returns {object} returns old value, new values, & location of storage\n */\nexport function setItem(key, value, options) {\n  if (!key || isUndefined(value)) {\n    return\n  }\n  const data = {}\n  const type = getStorageType(options)\n  const saveValue = JSON.stringify(value)\n  const setFirst = !useAll(type)\n\n  /* 1. Try localStorage */\n  if (useLocal(type)) {\n    // console.log('SET as localstorage', saveValue)\n    data[LOCAL_STORAGE] = {\n      location: LOCAL_STORAGE,\n      current: value, \n      previous: parse(localStorage.getItem(key))\n    }\n    // Set LocalStorage item\n    localStorage.setItem(key, saveValue)\n    if (setFirst) {\n      return data[LOCAL_STORAGE]\n    }\n  }\n  /* 2. Fallback to cookie */\n  if (useCookie(type)) {\n    // console.log('SET as cookie', saveValue)\n    data[COOKIE] = {\n      location: COOKIE,\n      current: value,\n      previous: parse(getCookie(key))\n    }\n    // Set Cookie\n    setCookie(key, saveValue)\n    if (setFirst) {\n      return data[COOKIE]\n    }\n  }\n  /* 3. Fallback to window/global */\n  data[GLOBAL] = {\n    location: GLOBAL, \n    current: value,\n    previous: get(key)\n  }\n  // Set global value\n  set(key, value)\n  // Return set value(s)\n  return (setFirst) ? data[GLOBAL] : data\n}\n\n/**\n * Remove values from localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n */\nexport function removeItem(key, options) {\n  if (!key) return\n  const type = getStorageType(options)\n  const values = getItem(key, ALL)\n\n  const data = {}\n  if (!isUndefined(values.localStorage) && useLocal(type)) {\n    /* 1. Try localStorage */\n    localStorage.removeItem(key)\n    data[LOCAL_STORAGE] = values.localStorage\n  }\n  if (!isUndefined(values.cookie) && useCookie(type)) {\n    /* 2. Fallback to cookie */\n    removeCookie(key)\n    data[COOKIE] = values.cookie\n  }\n  /* 3. Fallback to window/global */\n  if (!isUndefined(values.global) && useGlobal(type)) {\n    remove(key)\n    data[GLOBAL] = values.global\n  }\n  return data\n}\n\nfunction getStorageType(opts) {\n  if (!opts) return ANY\n  return isString(opts) ? opts : opts.storage\n}\n\nfunction useGlobal(storage) {\n  return useType(storage, GLOBAL)\n}\n\nfunction useLocal(storage) {\n  // If has localStorage and storage option not defined, or is set to 'localStorage' or '*'\n  return hasStorage && useType(storage, LOCAL_STORAGE)\n}\n\nfunction useCookie(storage) {\n  // If has cookies and storage option not defined, or is set to 'cookies' or '*'\n  return hasCookiesSupport && useType(storage, COOKIE)\n}\n\nfunction useAll(storage) {\n  return storage === ALL || storage === 'all'\n}\n\nfunction useType(storage, type) {\n  return (storage === ANY || storage === type || useAll(storage))\n}\n\nexport {\n  getCookie,\n  setCookie,\n  removeCookie,\n  globalContext,\n  hasLocalStorage,\n  hasCookies\n}\n\nexport default {\n  setItem,\n  getItem,\n  removeItem\n}"],"names":["parse","input","value","JSON","isObject","parseFloat","e","ALL","ANY","LOCAL_STORAGE","COOKIE","GLOBAL","hasStorage","hasLocalStorage","hasCookiesSupport","hasCookies","getItem","key","options","type","getStorageType","getFirst","useAll","localValue","useLocal","localStorage","undefined","isUndefined","cookieVal","useCookie","getCookie","globalValue","get","cookie","global","setItem","data","saveValue","stringify","setFirst","location","current","previous","setCookie","set","removeItem","values","removeCookie","useType","remove","opts","isString","storage"],"mappings":"ghBAMwBA,EAAMC,GAC5B,IAAIC,EAAQD,EACZ,IAEE,GAAc,UADdC,EAAQC,KAAKH,MAAMC,IACG,SACtB,GAAc,UAAVC,EAAmB,SACvB,GAAIE,EAASF,GAAQ,OAAOA,EACxBG,WAAWH,KAAWA,IACxBA,EAAQG,WAAWH,IAErB,MAAOI,IACT,GAAc,OAAVJ,GAA4B,KAAVA,EAGtB,OAAOA,ECbIK,IAAAA,EAAM,IACNC,EAAM,MACNC,EAAgB,eAChBC,EAAS,SACTC,EAAS,SAGhBC,EAAaC,IACbC,EAAoBC,aASVC,EAAQC,EAAKC,GAC3B,GAAKD,EAAL,CACA,IAAME,EAAOC,EAAeF,GACtBG,GAAYC,EAAOH,GAGnBI,EAAaC,EAASL,GAAQnB,EAAMyB,aAAaT,QAAQC,SAAQS,EACvE,GAAIL,IAAaM,EAAYJ,GAC3B,OAAOA,EAIT,IAAMK,EAAYC,EAAUV,GAAQnB,EAAM8B,EAAUb,SAAQS,EAC5D,GAAIL,GAAYO,EACd,OAAOA,EAIT,IAAMG,EAAcC,EAAIf,GAExB,OAAOI,EAAWU,EAAc,CAC9BN,aAAcF,EACdU,OAAQL,EACRM,OAAQH,aAYII,EAAQlB,EAAKf,EAAOgB,GAClC,GAAKD,IAAOU,EAAYzB,GAAxB,CAGA,IAAMkC,EAAO,GACPjB,EAAOC,EAAeF,GACtBmB,EAAYlC,KAAKmC,UAAUpC,GAC3BqC,GAAYjB,EAAOH,GAGzB,OAAIK,EAASL,KAEXiB,EAAI,aAAkB,CACpBI,SA/DuB,eAgEvBC,QAASvC,EACTwC,SAAU1C,EAAMyB,aAAaT,QAAQC,KAGvCQ,aAAaU,QAAQlB,EAAKoB,GACtBE,GACKH,EAAI,aAIXP,EAAUV,KAEZiB,EAAI,OAAW,CACbI,SA5EgB,SA6EhBC,QAASvC,EACTwC,SAAU1C,EAAM8B,EAAUb,KAG5B0B,EAAU1B,EAAKoB,GACXE,GACKH,EAAI,QAIfA,EAAI,OAAW,CACbI,SAvFkB,SAwFlBC,QAASvC,EACTwC,SAAUV,EAAIf,IAGhB2B,EAAI3B,EAAKf,GAEDqC,EAAYH,EAAI,OAAWA,aASrBS,EAAW5B,EAAKC,GAC9B,GAAKD,EAAL,CACA,IAAME,EAAOC,EAAeF,GACtB4B,EAAS9B,EAAQC,EA9GN,KAgHXmB,EAAO,GAgBb,OAfKT,EAAYmB,EAAOrB,eAAiBD,EAASL,KAEhDM,aAAaoB,WAAW5B,GACxBmB,EAAI,aAAkBU,EAAOrB,eAE1BE,EAAYmB,EAAOb,SAAWJ,EAAUV,KAE3C4B,EAAa9B,GACbmB,EAAI,OAAWU,EAAOb,SAGnBN,EAAYmB,EAAOZ,SAajBc,EAbsC7B,EAxHzB,YAyHlB8B,EAAOhC,GACPmB,EAAI,OAAWU,EAAOZ,QAEjBE,GAGT,SAAShB,EAAe8B,GACtB,OAAKA,EACEC,EAASD,GAAQA,EAAOA,EAAKE,QApInB,MA2InB,SAAS5B,EAAS4B,GAEhB,OAAOxC,GAAcoC,EAAQI,EA5IF,gBA+I7B,SAASvB,EAAUuB,GAEjB,OAAOtC,GAAqBkC,EAAQI,EAhJhB,UAmJtB,SAAS9B,EAAO8B,GACd,MAvJiB,MAuJVA,GAA+B,QAAZA,EAG5B,SAASJ,EAAQI,EAASjC,GACxB,MA1JiB,QA0JTiC,GAAmBA,IAAYjC,GAAQG,EAAO8B,GAYxD,MAAe,CACbjB,QAAAA,EACAnB,QAAAA,EACA6B,WAAAA"}