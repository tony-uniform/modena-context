{"version":3,"file":"analytics-util-types.module.js","sources":["../src/index.js"],"sourcesContent":["\n/*\n  Constants for reuse\n*/\nexport const FUNCTION = 'function'\nexport const STRING = 'string'\nexport const UNDEFINED = 'undefined'\nexport const BOOLEAN = 'boolean'\nexport const OBJECT = 'object'\nexport const ARRAY = 'array'\nexport const NUMBER = 'number'\nexport const noOp = () => {}\n\nexport const isBrowser = typeof window !== UNDEFINED\n\n/** \n * Check if value is function.\n * @param x\n * @return {x is Function}\n */\nexport function isFunction(x) {\n  return typeof x === FUNCTION\n}\n\n/** \n * Check if value is string.\n * @param x\n * @return {x is string}\n */\nexport function isString(x) {\n  return typeof x === STRING\n}\n\n/** \n * Check if value is number.\n * @param v\n * @return {v is Object}\n */\nexport function isNumber(v) {\n  return typeof v === NUMBER && !isNaN(v)\n}\n\n/** \n * Check if value is undefined.\n * @param x\n * @return {x is undefined}\n */\nexport function isUndefined(x) {\n  return typeof x === UNDEFINED\n}\n\n/** \n * @param x\n * @return {x is boolean}\n */\nexport function isBoolean(x) {\n  return typeof x === BOOLEAN\n}\n\n/** \n * @param x\n * @return {x is boolean}\n */\nexport function isNull(x) {\n  return x === null\n}\n\n/** \n * @template T\n * @param x\n * @return {x is Array<T>}\n */\nexport function isArray(x) {\n  return Object.prototype.toString.call(x) === '[object Array]'\n}\n\n/** \n * @param obj\n * @return {obj is Object}\n */\nexport function isObject(obj) {\n  if (typeof obj !== OBJECT || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return Object.getPrototypeOf(obj) === proto\n}\n\n\n/**\n * Check if value is regexp\n * @param {*} value - Value to check\n * @return {boolean} \n */\nexport function isRegex(value) {\n  return value instanceof RegExp\n}\n\n/** \n * @param func - function to check if noOp\n * @return {Boolean} - is noOp\n * @examples\n   function foo() {}\n   isNoOp(foo) // true\n   isNoOp(() => { }) // true\n   isNoOp(() => { console.log('hi') }) // false\n */\nexport function isNoOp(func) {\n  if (!isFunction(func)) return false\n  const emptyFunc = /{(\\r|\\n|\\s)*}/gm\n  const noOpStr = noOp.toString()\n  const funcString = (func.toString().match(emptyFunc) || [''])[0].replace(emptyFunc, noOpStr)\n  return noOpStr === funcString\n}\n\n/**\n * Check if value is truthy\n * @param {*} value \n * @return {Boolean} - is truthy value\n */\nexport function isTruthy(v) {\n  if (isString(v) && v.toLowerCase() === 'false') return false\n  return !!v\n}\n\n/**\n * Check if value is email\n * @param {*} str \n * @return {Boolean} - is email like value\n */\nexport function isEmail(str) {\n  if (str.length > 320) return false\n  return /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(str)\n}\n\n/** \n * @param obj\n * @return {obj is NodeList}\n */\nexport function isNodeList(obj) {\n  return NodeList.prototype.isPrototypeOf(obj)\n}\n\n/**\n * Check if input is DOM element\n * @param {HTMLElement|*} element\n * @return {boolean} \n */\nexport function isElement(element) {\n  return element instanceof Element || element instanceof HTMLDocument\n}\n\n/**\n * Check if element is form element\n * @param {HTMLElement} element\n * @return {boolean} \n */\nexport function isForm(element) {\n  return isElement(element) && element.nodeName === 'FORM'\n}\n\n\n/**\n * Check if DOM element is hidden\n * @param {HTMLElement|null|undefined} element\n * @param {HTMLElement|null|undefined} until \n * @return {boolean} \n */\nexport function isHidden(element, until) {\n  if (!element || getComputedStyle(element).visibility === \"hidden\") return true\n\n  while (element) {\n    if (until != null && element === until) return false\n    if (getComputedStyle(element).display === \"none\") return true\n    element = element.parentElement\n  }\n\n  return false\n}"],"names":["FUNCTION","STRING","UNDEFINED","BOOLEAN","OBJECT","ARRAY","NUMBER","noOp","isBrowser","window","isFunction","x","isString","isNumber","v","isNaN","isUndefined","isBoolean","isNull","isArray","Object","prototype","toString","call","isObject","obj","proto","getPrototypeOf","isRegex","value","RegExp","isNoOp","func","emptyFunc","noOpStr","match","replace","isTruthy","toLowerCase","isEmail","str","length","test","isNodeList","NodeList","isPrototypeOf","isElement","element","Element","HTMLDocument","isForm","nodeName","isHidden","until","getComputedStyle","visibility","display","parentElement"],"mappings":"AAIaA,IAAAA,EAAW,WACXC,EAAS,SACTC,EAAY,YACZC,EAAU,UACVC,EAAS,SACTC,EAAQ,QACRC,EAAS,SACTC,EAAO,aAEPC,EAPY,oBAOOC,gBAOhBC,EAAWC,GACzB,MAjBsB,mBAiBRA,WAQAC,EAASD,GACvB,MAzBoB,iBAyBNA,WAQAE,EAASC,GACvB,MA7BoB,iBA6BNA,IAAiBC,MAAMD,YAQvBE,EAAYL,GAC1B,YA1CuB,IA0CTA,WAOAM,EAAUN,GACxB,MAjDqB,kBAiDPA,WAOAO,EAAOP,GACrB,OAAa,OAANA,WAQOQ,EAAQR,GACtB,MAA6C,mBAAtCS,OAAOC,UAAUC,SAASC,KAAKZ,YAOxBa,EAASC,GACvB,GAzEoB,iBAyETA,GAA0B,OAARA,EAAc,SAG3C,IADA,IAAIC,EAAQD,EAC4B,OAAjCL,OAAOO,eAAeD,IAC3BA,EAAQN,OAAOO,eAAeD,GAGhC,OAAON,OAAOO,eAAeF,KAASC,WASxBE,EAAQC,GACtB,OAAOA,aAAiBC,gBAYVC,EAAOC,GACrB,IAAKtB,EAAWsB,GAAO,SACvB,IAAMC,EAAY,kBACZC,EAAU3B,EAAKe,WAErB,OAAOY,KADaF,EAAKV,WAAWa,MAAMF,IAAc,CAAC,KAAK,GAAGG,QAAQH,EAAWC,YAStEG,EAASvB,GACvB,QAAIF,EAASE,IAA0B,UAApBA,EAAEwB,gBACZxB,YAQKyB,EAAQC,GACtB,QAAIA,EAAIC,OAAS,8IAC8HC,KAAKF,YAOtIG,EAAWlB,GACzB,OAAOmB,SAASvB,UAAUwB,cAAcpB,YAQ1BqB,EAAUC,GACxB,OAAOA,aAAmBC,SAAWD,aAAmBE,sBAQ1CC,EAAOH,GACrB,OAAOD,EAAUC,IAAiC,SAArBA,EAAQI,kBAUvBC,EAASL,EAASM,GAChC,IAAKN,GAAoD,WAAzCO,iBAAiBP,GAASQ,WAAyB,SAEnE,KAAOR,GAAS,CACd,GAAa,MAATM,GAAiBN,IAAYM,EAAO,SACxC,GAA0C,SAAtCC,iBAAiBP,GAASS,QAAoB,SAClDT,EAAUA,EAAQU,cAGpB"}