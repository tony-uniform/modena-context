import { EnhancerContext, ComponentParameter, ComponentInstance, LimitPolicy, ComponentParameterEnhancer, ComponentParameterEnhancerFunction } from '@uniformdev/canvas';
import { ContentfulClientApi, Sys } from 'contentful';

interface AddClientArgs {
    /**
     * The Contentful source public ID that this client maps to in the composition data.
     * This is used to enable multiple Contentful spaces/environments as data sources.
     * If unspecified, the client will be the default source that is used when no source public ID
     * is in the data, or the source ID is 'default'.
     */
    source?: string;
    /** The Contentful client instance to use when fetching published data */
    client: ContentfulClientApi;
    /**
     * The Contentful client instance to use when fetching preview data.
     * If the preview client is not passed, it defaults to the client.
     */
    previewClient?: ContentfulClientApi;
}
declare class ContentfulClientList {
    private _clients;
    constructor(clients?: AddClientArgs[] | AddClientArgs);
    addClient({ source, client, previewClient }: AddClientArgs): void;
    getClient({ source, isPreviewClient, }: {
        source?: string;
        isPreviewClient?: boolean;
    }): ContentfulClientApi | undefined;
}

/** The default shape of the Contentful entry. Note that this can change if the query is altered. */
declare type ContentfulEntryResult<TFields> = {
    /**
     * The shape of the `fields` that the Contentful REST API is expected to return for this entry
     * https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/entries/entry
     *
     * These should line up with the fields in your content model(s) that are allowed for this component.
     */
    fields: TFields;
    /** System fields returned by the Contentful API. If you modify the query parameters to fetch more than fields, you may get more sys data than this. */
    sys: Partial<Pick<Sys, 'id' | 'type'>>;
};

declare type EntrySelectorParameterValue = {
    entryId: string;
    source?: string;
} | string | null | undefined;
declare type CreateContentfulQueryOptions<TContext extends EnhancerContext = EnhancerContext> = {
    /** Canvas parameter name being queried for. Not defined if using batching. */
    parameterName?: string;
    /** Canvas parameter value being fetched. Not defined if using batching. */
    parameter?: ComponentParameter<EntrySelectorParameterValue>;
    /** Component containing the parameter being fetched. Not defined if using batching. */
    component?: ComponentInstance;
    /** The default Contentful query expression (select fields + include 1 layer of references) */
    defaultQuery: any;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
/** The default shape of the result value of the Contentful enhancer. Note that this can change if the query is altered. */
declare type ContentfulEnhancerResult<TFields> = ContentfulEntryResult<TFields> | null;
declare type CreateContentfulEnhancerOptions = {
    /** Either a list of Contentful clients for use with multi-space/environment-enabled Canvas projects.
     * Or a single Contentful client for use with legacy Canvas data.*/
    client: ContentfulClientApi | ContentfulClientList;
    /** @deprecated Contentful client instance to use for fetching preview content.
     * This client is _only_ relevant when the `client` property is a single Contentful client intended for use with
     * legacy Canvas data. Conversely, if you use a `ContentfulClientList` for the `client` property, any value for `previewClient`
     * will be ignored. To avoid deprecated use, you should switch to using a `ContentfulClientList` for the `client` property. */
    previewClient?: ContentfulClientApi;
    /** Creates the Contentful client's query params for specific parameters. See https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters */
    createQuery?: (options: CreateContentfulQueryOptions) => any | undefined;
    useBatching?: boolean;
    limitPolicy?: LimitPolicy;
};
declare const CANVAS_CONTENTFUL_PARAMETER_TYPES: readonly string[];
declare function createContentfulEnhancer({ client, previewClient, createQuery, useBatching, limitPolicy, }: CreateContentfulEnhancerOptions): ComponentParameterEnhancer<EntrySelectorParameterValue, ContentfulEnhancerResult<unknown>>;

declare type ContentfulMultiEntryParameterValue = {
    entries: string[];
    source: string;
} | null | undefined;
declare type CreateContentfulMultiEntryQueryOptions<TContext extends EnhancerContext = EnhancerContext> = {
    /** Canvas parameter name being queried for */
    parameterName: string;
    /** Canvas parameter value being fetched */
    parameter: ComponentParameter<ContentfulMultiEntryParameterValue>;
    /** Component containing the parameter being fetched */
    component: ComponentInstance;
    /** The default Contentful query expression (select fields + include 1 layer of references) */
    defaultQuery: any;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
/** The default shape of the result value of the Contentful Multi Entry enhancer. Note that this can change if the query is altered. */
declare type ContentfulMultiEntryEnhancerResult<TFields> = ContentfulEntryResult<TFields>[] | null;
declare type CreateContentfulMultiEntryEnhancerOptions = {
    /** Either a list of Contentful clients for use with multi-space/environment-enabled Canvas projects. */
    clients: ContentfulClientList;
    /** Creates the Contentful client's query params for specific parameters. See https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters */
    createQuery?: (options: CreateContentfulMultiEntryQueryOptions) => any | undefined;
    limitPolicy?: LimitPolicy;
};
declare const CANVAS_CONTENTFUL_MULTI_PARAMETER_TYPES: readonly string[];
declare function createContentfulMultiEnhancer({ clients, createQuery, limitPolicy, }: CreateContentfulMultiEntryEnhancerOptions): ComponentParameterEnhancer<ContentfulMultiEntryParameterValue, ContentfulMultiEntryEnhancerResult<unknown>>;

declare const CANVAS_CONTENTFUL_QUERY_PARAMETER_TYPES: readonly string[];
declare type ContentfulQueryParameterValue = {
    source: string;
    contentType: string;
    count: number;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
} | null | undefined;
/** The default shape of the result value of the Contentful Query enhancer. Note that this can change if the query is altered. */
declare type ContentfulQueryEnhancerResult<TFields> = ContentfulEntryResult<TFields>[] | null;
declare type CreateContentfulQueryApiQueryOptions<TContext extends EnhancerContext = EnhancerContext> = {
    /** Canvas parameter name being queried for */
    parameterName: string;
    /** Canvas parameter value being fetched */
    parameter: ComponentParameter<ContentfulQueryParameterValue>;
    /** Component containing the parameter being fetched */
    component: ComponentInstance;
    /** The default Contentful query expression (select fields + include 1 layer of references) */
    defaultQuery: any;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
declare type CreateContentfulQueryEnhancerOptions = {
    /** Either a list of Contentful clients for use with multi-space/environment-enabled Canvas projects. */
    clients: ContentfulClientList;
    /** Creates the Contentful client's query params for specific parameters. See https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters */
    createQuery?: (options: CreateContentfulQueryApiQueryOptions) => any | undefined;
    limitPolicy?: LimitPolicy;
};
declare function createContentfulQueryEnhancer({ clients, createQuery, limitPolicy, }: CreateContentfulQueryEnhancerOptions): ComponentParameterEnhancer<ContentfulQueryParameterValue, ContentfulQueryEnhancerResult<unknown>>;

declare type EnhancerValue = ContentfulEntryResult<unknown> | ContentfulEntryResult<unknown>[] | null;
declare const contentfulRichTextToHtmlEnhancer: ComponentParameterEnhancerFunction<EnhancerValue>;

export { AddClientArgs, CANVAS_CONTENTFUL_MULTI_PARAMETER_TYPES, CANVAS_CONTENTFUL_PARAMETER_TYPES, CANVAS_CONTENTFUL_QUERY_PARAMETER_TYPES, ContentfulClientList, ContentfulEnhancerResult, ContentfulMultiEntryEnhancerResult, ContentfulMultiEntryParameterValue, ContentfulQueryEnhancerResult, ContentfulQueryParameterValue, CreateContentfulEnhancerOptions, CreateContentfulMultiEntryEnhancerOptions, CreateContentfulMultiEntryQueryOptions, CreateContentfulQueryApiQueryOptions, CreateContentfulQueryEnhancerOptions, CreateContentfulQueryOptions, EntrySelectorParameterValue, contentfulRichTextToHtmlEnhancer, createContentfulEnhancer, createContentfulMultiEnhancer, createContentfulQueryEnhancer };
