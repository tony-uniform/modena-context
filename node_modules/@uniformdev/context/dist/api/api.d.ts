import { a as AggregateGetParameters, b as AggregateGetResponse, c as AggregatePutParameters, d as AggregateDeleteParameters, D as DimensionGetParameters, e as DimensionGetResponse, f as EnrichmentGetParameters, g as EnrichmentGetResponse, h as EnrichmentPutParameters, i as EnrichmentDeleteParameters, j as EnrichmentValuePutParameters, k as EnrichmentValueDeleteParameters, M as ManifestGetParameters, l as ManifestGetResponse, m as QuirkGetParameters, n as QuirkGetResponse, o as QuirkPutParameters, p as QuirkDeleteParameters, q as SignalGetParameters, r as SignalGetResponse, s as SignalPutParameters, t as SignalDeleteParameters, u as TestGetParameters, v as TestGetResponse, w as TestPutParameters, x as TestDeleteParameters, y as DimensionDefinition } from '../contextTypes-572b0d33.js';
export { A as Aggregate, d as AggregateDeleteParameters, a as AggregateGetParameters, b as AggregateGetResponse, c as AggregatePutParameters, C as CookieCriteria, I as CurrentPageCriteria, y as DimensionDefinition, D as DimensionGetParameters, e as DimensionGetResponse, z as EnrichmentCategory, E as EnrichmentCategoryWithValues, i as EnrichmentDeleteParameters, f as EnrichmentGetParameters, g as EnrichmentGetResponse, h as EnrichmentPutParameters, B as EnrichmentValue, k as EnrichmentValueDeleteParameters, j as EnrichmentValuePutParameters, H as EventCriteria, M as ManifestGetParameters, l as ManifestGetResponse, P as PageViewCountCriteria, F as QueryStringCriteria, Q as Quirk, G as QuirkCriteria, p as QuirkDeleteParameters, m as QuirkGetParameters, n as QuirkGetResponse, o as QuirkPutParameters, R as RootSignalCriteriaGroup, t as SignalDeleteParameters, q as SignalGetParameters, r as SignalGetResponse, s as SignalPutParameters, S as SignalWithId, T as Test, x as TestDeleteParameters, u as TestGetParameters, v as TestGetResponse, w as TestPutParameters } from '../contextTypes-572b0d33.js';
import { g as ManifestV2 } from '../types-876fb8b8.js';
import '../v2-manifest.swagger-ff2af13e.js';
import 'mitt';

declare type LimitPolicy = <ReturnValue>(func: () => Promise<ReturnValue>) => Promise<ReturnValue>;
declare const nullLimitPolicy: LimitPolicy;
declare type ClientOptions = {
    /** The Uniform API host to use. Internal use. */
    apiHost?: string;
    /** The Uniform API key to use when sending API requests. This or bearer token must be specified. */
    apiKey?: string | null;
    /** The Uniform bearer token to use. Internal use. */
    bearerToken?: string | null;
    /** The Uniform project ID to connect to */
    projectId?: string | null;
    /** Specify a fetch implementation to use when fetching data. Useful if you want to only polyfill selectively. */
    fetch?: typeof fetch;
    /**
     * Specify how to retry and throttle requests.
     * Default: no limit policy.
     */
    limitPolicy?: LimitPolicy;
};
declare type ExceptProject<T> = Omit<T, 'projectId'>;
declare class ApiClientError extends Error {
    errorMessage: string;
    fetchMethod: string;
    fetchUri: string;
    statusCode?: number | undefined;
    statusText?: string | undefined;
    requestId?: string | undefined;
    constructor(errorMessage: string, fetchMethod: string, fetchUri: string, statusCode?: number | undefined, statusText?: string | undefined, requestId?: string | undefined);
}

declare class ApiClient {
    protected options: Required<ClientOptions>;
    constructor(options: ClientOptions);
    protected apiClient<TResponse>(fetchUri: URL, options?: RequestInit & {
        /** Whether to expect a JSON response or not */
        expectNoContent?: boolean;
    }): Promise<TResponse>;
    protected createUrl(path: string, queryParams?: Record<string, string | boolean | undefined | null | number>): URL;
    private static getRequestId;
}

declare class AggregateClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all aggregates for a project */
    get(options?: ExceptProject<AggregateGetParameters>): Promise<AggregateGetResponse>;
    /** Updates or creates (based on id) an Aggregate */
    upsert(body: ExceptProject<AggregatePutParameters>): Promise<void>;
    /** Deletes an Aggregate */
    remove(body: ExceptProject<AggregateDeleteParameters>): Promise<void>;
}

declare class DimensionClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches the known score dimensions for a project */
    get(options?: ExceptProject<DimensionGetParameters>): Promise<DimensionGetResponse>;
}

declare class EnrichmentClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all enrichments and values for a project, grouped by category */
    get(options?: ExceptProject<EnrichmentGetParameters>): Promise<EnrichmentGetResponse>;
    /** Updates or creates (based on id) an enrichment category */
    upsertCategory(body: ExceptProject<EnrichmentPutParameters>): Promise<void>;
    /** Deletes an enrichment category */
    removeCategory(body: ExceptProject<EnrichmentDeleteParameters>): Promise<void>;
    /** Updates or creates (based on id) an enrichment value within an enrichment category */
    upsertValue(body: ExceptProject<EnrichmentValuePutParameters>): Promise<void>;
    /** Deletes an enrichment value within an enrichment category. The category is left alone. */
    removeValue(body: ExceptProject<EnrichmentValueDeleteParameters>): Promise<void>;
}

declare class ManifestClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches the Context manifest for a project */
    get(options?: ExceptProject<ManifestGetParameters>): Promise<ManifestGetResponse>;
}

declare class QuirkClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all Quirks for a project */
    get(options?: ExceptProject<QuirkGetParameters>): Promise<QuirkGetResponse>;
    /** Updates or creates (based on id) a Quirk */
    upsert(body: ExceptProject<QuirkPutParameters>): Promise<void>;
    /** Deletes a Quirk */
    remove(body: ExceptProject<QuirkDeleteParameters>): Promise<void>;
}

declare class SignalClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all Signals for a project */
    get(options?: ExceptProject<SignalGetParameters>): Promise<SignalGetResponse>;
    /** Updates or creates (based on id) a Signal */
    upsert(body: ExceptProject<SignalPutParameters>): Promise<void>;
    /** Deletes a Signal */
    remove(body: ExceptProject<SignalDeleteParameters>): Promise<void>;
}

declare class TestClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all Tests for a project */
    get(options?: ExceptProject<TestGetParameters>): Promise<TestGetResponse>;
    /** Updates or creates (based on id) a Test */
    upsert(body: ExceptProject<TestPutParameters>): Promise<void>;
    /** Deletes a Test */
    remove(body: ExceptProject<TestDeleteParameters>): Promise<void>;
}

declare class ContextClient {
    constructor(options: ClientOptions);
    readonly enrichments: EnrichmentClient;
    readonly aggregates: AggregateClient;
    readonly dimensions: DimensionClient;
    readonly manifest: ManifestClient;
    readonly quirks: QuirkClient;
    readonly signals: SignalClient;
    readonly tests: TestClient;
}

declare type DimensionDisplayData = {
    dim: string;
    type: 'Aggregate' | 'Enrichment' | 'Signal' | 'Intent' | 'Audience';
    category?: string;
    name: string;
};
declare function computeDimensionDefinitionDisplayData(dim: DimensionDefinition): DimensionDisplayData;
declare function computeDimensionDisplayData(dim: string, manifest: ManifestV2): DimensionDisplayData | undefined;
/** Computes the standard display name for a given dimension from the dimensions API */
declare function computeDimensionDisplayName(dim: DimensionDefinition): string;

export { AggregateClient, ApiClientError, ClientOptions, ContextClient, DimensionClient, DimensionDisplayData, EnrichmentClient, ExceptProject, LimitPolicy, ManifestClient, QuirkClient, SignalClient, computeDimensionDefinitionDisplayData, computeDimensionDisplayData, computeDimensionDisplayName, nullLimitPolicy };
