import { T as TransitionDataStore, S as StorageCommands, V as VisitorData, a as TransitionDataStoreOptions, D as DecayFunction, O as OutputSeverity, L as LogDrain, C as ContextPlugin, b as CriteriaEvaluator, c as StringMatch, d as ScoreVector, A as AggregateDimension, e as VariantMatchCriteria, f as LogMessage } from './types-876fb8b8.js';
export { A as AggregateDimension, l as AggregateDimensionInput, ac as BehaviorTag, a0 as Context, $ as ContextEvents, Y as ContextOptions, C as ContextPlugin, t as ContextState, u as ContextStateUpdate, b as CriteriaEvaluator, n as CriteriaEvaluatorParameters, m as CriteriaEvaluatorResult, D as DecayFunction, H as DecayOptions, aj as DevToolsActions, an as DevToolsDataEvent, ak as DevToolsEvent, al as DevToolsEvents, ar as DevToolsForgetEvent, ao as DevToolsHelloEvent, am as DevToolsLogEvent, aq as DevToolsRawCommandsEvent, ai as DevToolsState, ah as DevToolsUiVersion, ap as DevToolsUpdateEvent, ab as DimensionMatch, E as EnrichmentCategory, q as EnrichmentData, r as EventData, G as GroupCriteriaEvaluator, I as IdentifyCommand, L as LogDrain, f as LogMessage, a6 as LogMessageGroup, a5 as LogMessageSingle, a1 as LogMessages, M as ManifestInstance, g as ManifestV2, a3 as MessageCategory, a4 as MessageFunc, w as ModifyScoreCommand, x as ModifySessionScoreCommand, N as NumberMatch, O as OutputSeverity, Z as PersonalizationEvent, P as PersonalizationManifest, a9 as PersonalizeOptions, ae as PersonalizedResult, ad as PersonalizedVariant, Q as Quirks, W as SERVER_STATE_ID, d as ScoreVector, U as ServerToClientTransitionState, y as SetConsentCommand, F as SetControlGroupCommand, z as SetQuirkCommand, B as SetTestCommand, a2 as Severity, h as Signal, j as SignalCriteria, i as SignalCriteriaGroup, o as SignalData, v as StorageCommand, S as StorageCommands, c as StringMatch, k as TestDefinition, _ as TestEvent, a8 as TestOptions, ag as TestResult, af as TestVariant, p as Tests, T as TransitionDataStore, X as TransitionDataStoreEvents, a as TransitionDataStoreOptions, e as VariantMatchCriteria, V as VisitorData, R as VisitorDataStore, K as VisitorDataStoreEvents, J as VisitorDataStoreOptions, s as emptyVisitorData, aa as personalizeVariations, a7 as testVariations } from './types-876fb8b8.js';
import Cookies from 'js-cookie';
import './v2-manifest.swagger-ff2af13e.js';
import 'mitt';

declare type CookieTransitionDataStoreOptions = {
    /**
     * The value of the score cookie during server-side rendering.
     * Should be parsed from the incoming request.
     * IMPORTANT: If not passed, the transition store will not have any effect during SSR.
     */
    serverCookieValue?: string;
    /**
     * The name of the cookie to store client-to-server score information in.
     * Defaults to UNIFORM_DEFAULT_COOKIE_NAME if not set.
     */
    cookieName?: string;
    /**
     * Attributes to set on the transfer cookie.
     * Persistence is not necessary, because the data is only used for temporary transition;
     * local storage is the master copy. Defaults to SameSite=Lax.
     */
    cookieAttributes?: Cookies.CookieAttributes;
};
declare const UNIFORM_DEFAULT_COOKIE_NAME = "ufvd";
/**
 * Handles client-to-server score handoff using an encoded cookie with the visitor score vector.
 * NOTE: forget me is not supported when on the server side.
 */
declare class CookieTransitionDataStore extends TransitionDataStore {
    #private;
    constructor({ serverCookieValue, cookieName, cookieAttributes, }: CookieTransitionDataStoreOptions);
    handleDelete(): Promise<void>;
    handleUpdateData(_: StorageCommands[], computedValue: VisitorData): Promise<void>;
}

declare type EdgeTransitionDataStoreOptions = TransitionDataStoreOptions & {
    serverCookieValue?: string;
    visitorIdCookieName?: string;
};
declare class EdgeTransitionDataStore extends TransitionDataStore {
    #private;
    constructor({ serverCookieValue, visitorIdCookieName, ...base }: EdgeTransitionDataStoreOptions);
    handleDelete(fromAllDevices?: boolean): Promise<void>;
    handleUpdateData(commands: StorageCommands[]): Promise<void>;
}

declare type LinearDecayOptions = {
    /**
     * The length of time before decay starts, in msec.
     * Default: 1 day (8.64e7)
     */
    gracePeriod?: number;
    /**
     * How much the score decays per day (decimal, 0-1).
     * Default: decay over 30 days (1/30)
     *
     * Note: the grace period is not included in this rate,
     * so if the grace period is 1 day and the decay rate is 1/30,
     * it would take 31 days to hit max decay.
     */
    decayRate?: number;
    /**
     * The maximum amount of decay that can occur at once (decimal, 0-1)
     * Default: 95% (0.95)
     */
    decayCap?: number;
};
/**
 * Creates a function that applies linear decay to scores over time.
 */
declare function createLinearDecay(options?: LinearDecayOptions): DecayFunction;

/**
 * Creates a new log drain that will log to the console.
 * The log drain will only log event IDs, but is much smaller than the
 * debug log drain.
 *
 * NOTE: you probably want enableConsoleLogDrain() instead of this function.
 */
declare function createConsoleLogDrain(level: OutputSeverity): LogDrain;
/**
 * Enables logging Context events to the browser console.
 * Lightweight events with only the event ID are emitted.
 */
declare function enableConsoleLogDrain(level: OutputSeverity): ContextPlugin;

declare const cookieEvaluator: CriteriaEvaluator;

declare const pageViewCountDimension: string;
declare const pageViewCountEvaluator: CriteriaEvaluator;

declare const queryStringEvaluator: CriteriaEvaluator;

declare const quirkEvaluator: CriteriaEvaluator;

declare const eventEvaluator: CriteriaEvaluator;

declare const currentPageEvaluator: CriteriaEvaluator;

/** Tests if a StringMatch matches a string value */
declare function isStringMatch(lhs: string | number | null | undefined, match: StringMatch): boolean;
declare function explainStringMatch(lhs: string | number | null | undefined, match: StringMatch): string;
declare function explainStringMatchCriteria(match: StringMatch): string;

declare type ConsoleDebugLogDrainOptions = {
    enableOnServer?: boolean;
};
/**
 * Creates a new log drain that will log full debug messages to the console.
 * The debug log drain adds significant bundle size, but is useful for debugging.
 *
 * NOTE: you probably want enableDebugConsoleLogDrain() instead of this function.
 */
declare function createDebugConsoleLogDrain(level: OutputSeverity, options?: ConsoleDebugLogDrainOptions): LogDrain;
/**
 * Enables logging Context events to the browser console.
 * Lightweight events with only the event ID are emitted.
 */
declare function enableDebugConsoleLogDrain(level: OutputSeverity, options?: ConsoleDebugLogDrainOptions): ContextPlugin;

/** Computes aggregated scores based on other dimensions */
declare function computeAggregateDimensions(primitiveScores: ScoreVector, aggregates: Record<string, AggregateDimension>): ScoreVector;

declare function getEnrichmentVectorKey(category: string, value: string): string;

declare function evaluateVariantMatch(variantId: string, match: VariantMatchCriteria | undefined | null, vec: ScoreVector, onLogMessage?: (message: LogMessage) => void): boolean;

declare enum ScriptType {
    ListStart = "nesi-list-start",
    ListEnd = "nesi-list-end",
    ListItem = "nesi-list-item-html",
    ListItemSettings = "nesi-list-item-settings",
    TestStart = "nesi-test-start",
    TestEnd = "nesi-test-end",
    Unknown = "unknown"
}
declare type EdgePersonalizeComponentOptions = {
    count?: number;
};
declare type EdgeTestComponentOptions = {
    name: string;
};
declare const EdgeNodeTagName = "nesitag";

/**
 * Enables a Context instance to feed data to the Uniform Context DevTools.
 * DevTools can be hosted either as a Chromium extension, or as a standalone
 * React app within a page and receive data once this plugin has been activated.
 * @returns Function that when invoked detaches the event listeners and disables DevTools.
 */
declare function enableContextDevTools(): ContextPlugin;

declare type QuickConnectConfig = {
    apiKey: string;
    projectId: string;
    apiHost?: string;
};
declare function serializeQuickConnect(config: QuickConnectConfig): string;
declare function parseQuickConnect(serialized: string): Required<QuickConnectConfig>;

export { ConsoleDebugLogDrainOptions, CookieTransitionDataStore, CookieTransitionDataStoreOptions, EdgeNodeTagName, EdgePersonalizeComponentOptions, EdgeTestComponentOptions, EdgeTransitionDataStore, EdgeTransitionDataStoreOptions, LinearDecayOptions, QuickConnectConfig, ScriptType, UNIFORM_DEFAULT_COOKIE_NAME, computeAggregateDimensions, cookieEvaluator, createConsoleLogDrain, createDebugConsoleLogDrain, createLinearDecay, currentPageEvaluator, enableConsoleLogDrain, enableContextDevTools, enableDebugConsoleLogDrain, evaluateVariantMatch, eventEvaluator, explainStringMatch, explainStringMatchCriteria, getEnrichmentVectorKey, isStringMatch, pageViewCountDimension, pageViewCountEvaluator, parseQuickConnect, queryStringEvaluator, quirkEvaluator, serializeQuickConnect };
