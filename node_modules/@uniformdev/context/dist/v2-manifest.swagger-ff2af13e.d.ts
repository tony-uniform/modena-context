/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    "/api/v2/manifest": {
        /**
         * Fetches the Intent Manifest for a given project.
         * If no manifest has ever been published, and an API key is used that has preview manifest permissions then the current preview manifest will be returned (in delivery format).
         */
        get: {
            parameters: {
                query: {
                    preview?: boolean;
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["ManifestV2"];
                    };
                };
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                /** No manifest has ever been published, and the API key does not have preview permissions */
                404: {
                    content: {
                        "text/plain": string;
                    };
                };
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
    };
}
interface components {
    schemas: {
        ManifestV2: {
            project: {
                /**
                 * Format: uuid
                 * @description is not present unless getting a preview manifest
                 */
                id?: string;
                /** @description is not present unless getting a preview manifest */
                name?: string;
                /** @description is not present unless getting a preview manifest */
                ui_version?: number;
                pz?: components["schemas"]["PersonalizationManifest"];
                /** @description A/B test settings */
                test?: {
                    [key: string]: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["Test"];
                };
            };
        };
        PersonalizationManifest: {
            /** @description Map of all signals defined for personalization criteria */
            sig?: {
                [key: string]: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["Signal"];
            };
            /** @description Map of all enrichment categories defined for personalization criteria */
            enr?: {
                [key: string]: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["EnrichmentCategory"];
            };
            /** @description Map of all aggregate dimensions (intents or audiences) defined for personalization criteria */
            agg?: {
                [key: string]: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["AggregateDimension"];
            };
            /** @description Percentage of visitors that will be used as a personalization control group (not shown any personalization) */
            control?: number;
        };
    };
}
interface external {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-context-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                EnrichmentCategory: {
                    /** @description The maximum visitor score allowed for enrichment keys in this category */
                    cap: number;
                };
                PreviewSignal: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["Signal"] & {
                    /** @description Friendly name of the signal */
                    name: string;
                    /** @description Description of the signal */
                    description?: string;
                };
                Signal: {
                    /** @description The signal strength per activation (each time its criteria are true, this score is added) */
                    str: number;
                    /** @description The maximum visitor score allowed for this signal */
                    cap: number;
                    /**
                     * @description How long the signal's score should persist
                     * 's' = current session (expires after a period of inactivity)
                     * 'p' = permanent (expires as far in the future as possible, may be limited by browser security settings)
                     * 't' = transient (score tracks the current state of the criteria every time scores are updated)
                     */
                    dur: "s" | "p" | "t";
                    crit: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["RootSignalCriteriaGroup"];
                };
                RootSignalCriteriaGroup: {
                    /** @description Criteria type (Group of other criteria) */
                    type: "G";
                    /**
                     * @description The logical operator to apply to the criteria groups
                     * & = AND
                     * | = OR
                     *
                     * Default is `&` if unspecified.
                     *
                     * @default &
                     */
                    op?: "&" | "|";
                    /** @description The criteria clauses that make up this grouping of criteria */
                    clauses: (external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteriaGroup"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteria"])[];
                };
                SignalCriteriaGroup: {
                    /** @description Criteria type (Group of other criteria) */
                    type: "G";
                    /**
                     * @description The logical operator to apply to the criteria groups
                     * & = AND
                     * | = OR
                     *
                     * Default is `&` if unspecified.
                     */
                    op?: "&" | "|";
                    /** @description The criteria clauses that make up this grouping of criteria */
                    clauses: (external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteriaGroup"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteria"])[];
                };
                SignalCriteria: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["CookieCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["QueryStringCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["QuirkCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["EventCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["CurrentPageCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["PageViewCountCriteria"];
                /** @description Matches a URL query string parameter value */
                QueryStringCriteria: {
                    type: "QS";
                    /** @description The name of the query string parameter to match */
                    queryName: string;
                    /** @description The value to match the query string parameter against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches a web cookie value */
                CookieCriteria: {
                    type: "CK";
                    /** @description The name of the cookie to match */
                    cookieName: string;
                    /** @description The value to match the cookie against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches a visitor quirk key and value */
                QuirkCriteria: {
                    type: "QK";
                    /** @description The name of the quirk key to match */
                    key: string;
                    /** @description The quirk value to match against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches an analytics event name being fired */
                EventCriteria: {
                    type: "EVT";
                    /** @description How to match the event name */
                    event: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /**
                 * @description Matches the current page's absolute path (i.e. /path/to/page.html)
                 * Does not include the query string or protocol and hostname (i.e. NOT https://foo.com/path/to/page.html?query=something)
                 */
                CurrentPageCriteria: {
                    type: "PV";
                    /** @description The page/route path to match as a page that has been visited */
                    path: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                PageViewCountCriteria: {
                    type: "PVC";
                    /** @description The expression to match the page view count against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["NumberMatch"];
                };
                /** @description Describes a match expression on a string */
                StringMatch: {
                    /** @description The right hand side of the match expression */
                    rhs: string;
                    /**
                     * @description The match operator
                     * '=' = exact match
                     * '~' = contains match
                     * '//' = regular expression match
                     *
                     * Any of the above can be prefixed with '!' to invert the match (i.e. != for 'not an exact match')
                     */
                    op: "=" | "~" | "//" | "!=" | "!~" | "!//";
                    /** @description The case sensitivity of the match. Defaults to false if unspecified. */
                    cs?: boolean;
                } | {
                    /**
                     * @description The type of match to perform
                     * '*' = exists with any value
                     * '!*' = does not exist
                     */
                    op: "*" | "!*";
                };
                /** @description Describes a match expression on a number */
                NumberMatch: {
                    /** @description The right hand side of the match expression */
                    rhs: number;
                    /**
                     * @description The type of match to perform
                     * '=' = exact match
                     * '!=' = not an exact match
                     * '<' = less than match expression
                     * '>' = greater than match expression
                     */
                    op: "=" | "<" | ">" | "!=";
                };
                /** @description Defines an aggregate dimension that is a grouping of other dimensions' scores; an intent or audience. */
                AggregateDimension: {
                    /** @description Input dimensions to the aggregate dimension */
                    inputs: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["AggregateDimensionInput"][];
                };
                /** @description Defines an input dimension to an aggregate dimension */
                AggregateDimensionInput: {
                    /**
                     * @description Dimension name to reference as an input.
                     * For enrichment inputs, use CATEGORY_KEY as the dimension.
                     * Enrichments, signals, and other aggregate dimensions may be referenced.
                     *
                     * Note that creating a cycle of aggregate dimensions is allowed, however
                     * the final score will _ignore_ the cycled aggregate dimension in the result.
                     * This can be used to create mutually exclusive aggregates.
                     */
                    dim: string;
                    /**
                     * @description The sign of the input dimension controls how it affects the aggregate dimension's final score.
                     *
                     * '+' = add to the final score
                     * '-' = subtract from the final score
                     * 'c' = clear the final score (if the input dimension has any score at all, this aggreate will have no score regardless of other inputs)
                     *
                     * Default if unspecified: '+'
                     *
                     * @default +
                     */
                    sign?: "+" | "-" | "c";
                };
                Test: {
                    /** @description Winning variation ID - if set, the test will not run and this variation is shown to all visitors (the test is closed) */
                    wv?: string;
                };
            };
        };
        operations: {};
    };
}

export { components as c, external as e, paths as p };
