import { p as paths$7 } from './v2-manifest.swagger-ff2af13e.js';

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$6 {
    "/api/v1/enrichments": {
        get: {
            parameters: {
                query: {
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            enrichments: components$6["schemas"]["EnrichmentCategoryWithValues"][];
                        };
                    };
                };
                400: external$6["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$6["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$6["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$6["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$6["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$6["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$6["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$6["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$6["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$6["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        enrichment: components$6["schemas"]["EnrichmentCategory"];
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$6["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$6["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$6["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$6["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$6["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        enrichmentId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface components$6 {
    schemas: {
        EnrichmentCategory: {
            /** @description Public ID of the enrichment category */
            id: string;
            /** @description Display name of the enrichment category */
            name: string;
            /** @description Optional sort order of the enrichment category (if not set, sorts by name) */
            sortOrder?: number | null;
            /**
             * @description The maximum visitor score allowed for enrichment keys in this category
             * @default 99999999
             */
            cap?: number;
        };
        EnrichmentCategoryWithValues: components$6["schemas"]["EnrichmentCategory"] & {
            values: components$6["schemas"]["EnrichmentValue"][];
        };
        EnrichmentValue: {
            /** @description Public ID of the enrichment value */
            id: string;
            /** @description Display name of the enrichment value */
            value: string;
            /** @description Optional sort order of the enrichment value (if not set, sorts by name) */
            sortOrder?: number | null;
        };
    };
}
interface external$6 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$6["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$6["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$6["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$5 {
    "/api/v1/enrichment-values": {
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        enrichmentValue: external$5["v1-enrichments.swagger.yml"]["components"]["schemas"]["EnrichmentValue"];
                        enrichmentId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                /** Parent enrichment category was not found */
                404: unknown;
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        enrichmentId: string;
                        /** Format: uuid */
                        projectId: string;
                        enrichmentValueId: string;
                    };
                };
            };
        };
    };
}
interface external$5 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "v1-enrichments.swagger.yml": {
        paths: {
            "/api/v1/enrichments": {
                get: {
                    parameters: {
                        query: {
                            projectId: string;
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": {
                                    enrichments: external$5["v1-enrichments.swagger.yml"]["components"]["schemas"]["EnrichmentCategoryWithValues"][];
                                };
                            };
                        };
                        400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                };
                put: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                enrichment: external$5["v1-enrichments.swagger.yml"]["components"]["schemas"]["EnrichmentCategory"];
                                /** Format: uuid */
                                projectId: string;
                            };
                        };
                    };
                };
                delete: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                enrichmentId: string;
                                /** Format: uuid */
                                projectId: string;
                            };
                        };
                    };
                };
            };
        };
        components: {
            schemas: {
                EnrichmentCategory: {
                    /** @description Public ID of the enrichment category */
                    id: string;
                    /** @description Display name of the enrichment category */
                    name: string;
                    /** @description Optional sort order of the enrichment category (if not set, sorts by name) */
                    sortOrder?: number | null;
                    /**
                     * @description The maximum visitor score allowed for enrichment keys in this category
                     * @default 99999999
                     */
                    cap?: number;
                };
                EnrichmentCategoryWithValues: external$5["v1-enrichments.swagger.yml"]["components"]["schemas"]["EnrichmentCategory"] & {
                    values: external$5["v1-enrichments.swagger.yml"]["components"]["schemas"]["EnrichmentValue"][];
                };
                EnrichmentValue: {
                    /** @description Public ID of the enrichment value */
                    id: string;
                    /** @description Display name of the enrichment value */
                    value: string;
                    /** @description Optional sort order of the enrichment value (if not set, sorts by name) */
                    sortOrder?: number | null;
                };
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$4 {
    "/api/v2/aggregate": {
        get: {
            parameters: {
                query: {
                    /** The project to fetch aggregates for */
                    projectId: string;
                    /** Limit the results to a specific aggregate ID */
                    aggregateId?: string;
                    /**
                     * Limit the results to a specific aggregate type
                     * 0: Audience
                     * 1: Intent
                     */
                    type?: 0 | 1;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            aggregates: components$5["schemas"]["AggregateData"][];
                        };
                    };
                };
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        aggregate: components$5["schemas"]["AggregateData"];
                        /** Format: uuid */
                        projectId: string;
                        /**
                         * @description Skips updating aggregate inputs and upserts only the aggregate definition.
                         * Inputs data is still required, but is ignored and not saved or validated.
                         * Useful when creating aggregates that reference each other: Create the definitions, then the inputs.
                         */
                        skipInputs?: boolean;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        aggregateId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface components$5 {
    schemas: {
        AggregateData: {
            id: string;
            name: string;
            description?: string;
            /**
             * @description The type of aggregate
             * 0: Audience
             * 1: Intent
             */
            type: 0 | 1;
            inputs: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["AggregateDimensionInput"][];
        };
    };
}
interface external$4 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-context-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                EnrichmentCategory: {
                    /** @description The maximum visitor score allowed for enrichment keys in this category */
                    cap: number;
                };
                PreviewSignal: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["Signal"] & {
                    /** @description Friendly name of the signal */
                    name: string;
                    /** @description Description of the signal */
                    description?: string;
                };
                Signal: {
                    /** @description The signal strength per activation (each time its criteria are true, this score is added) */
                    str: number;
                    /** @description The maximum visitor score allowed for this signal */
                    cap: number;
                    /**
                     * @description How long the signal's score should persist
                     * 's' = current session (expires after a period of inactivity)
                     * 'p' = permanent (expires as far in the future as possible, may be limited by browser security settings)
                     * 't' = transient (score tracks the current state of the criteria every time scores are updated)
                     */
                    dur: "s" | "p" | "t";
                    crit: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["RootSignalCriteriaGroup"];
                };
                RootSignalCriteriaGroup: {
                    /** @description Criteria type (Group of other criteria) */
                    type: "G";
                    /**
                     * @description The logical operator to apply to the criteria groups
                     * & = AND
                     * | = OR
                     *
                     * Default is `&` if unspecified.
                     *
                     * @default &
                     */
                    op?: "&" | "|";
                    /** @description The criteria clauses that make up this grouping of criteria */
                    clauses: (external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteriaGroup"] | external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteria"])[];
                };
                SignalCriteriaGroup: {
                    /** @description Criteria type (Group of other criteria) */
                    type: "G";
                    /**
                     * @description The logical operator to apply to the criteria groups
                     * & = AND
                     * | = OR
                     *
                     * Default is `&` if unspecified.
                     */
                    op?: "&" | "|";
                    /** @description The criteria clauses that make up this grouping of criteria */
                    clauses: (external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteriaGroup"] | external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteria"])[];
                };
                SignalCriteria: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["CookieCriteria"] | external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["QueryStringCriteria"] | external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["QuirkCriteria"] | external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["EventCriteria"] | external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["CurrentPageCriteria"] | external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["PageViewCountCriteria"];
                /** @description Matches a URL query string parameter value */
                QueryStringCriteria: {
                    type: "QS";
                    /** @description The name of the query string parameter to match */
                    queryName: string;
                    /** @description The value to match the query string parameter against */
                    match: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches a web cookie value */
                CookieCriteria: {
                    type: "CK";
                    /** @description The name of the cookie to match */
                    cookieName: string;
                    /** @description The value to match the cookie against */
                    match: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches a visitor quirk key and value */
                QuirkCriteria: {
                    type: "QK";
                    /** @description The name of the quirk key to match */
                    key: string;
                    /** @description The quirk value to match against */
                    match: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches an analytics event name being fired */
                EventCriteria: {
                    type: "EVT";
                    /** @description How to match the event name */
                    event: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /**
                 * @description Matches the current page's absolute path (i.e. /path/to/page.html)
                 * Does not include the query string or protocol and hostname (i.e. NOT https://foo.com/path/to/page.html?query=something)
                 */
                CurrentPageCriteria: {
                    type: "PV";
                    /** @description The page/route path to match as a page that has been visited */
                    path: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                PageViewCountCriteria: {
                    type: "PVC";
                    /** @description The expression to match the page view count against */
                    match: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["NumberMatch"];
                };
                /** @description Describes a match expression on a string */
                StringMatch: {
                    /** @description The right hand side of the match expression */
                    rhs: string;
                    /**
                     * @description The match operator
                     * '=' = exact match
                     * '~' = contains match
                     * '//' = regular expression match
                     *
                     * Any of the above can be prefixed with '!' to invert the match (i.e. != for 'not an exact match')
                     */
                    op: "=" | "~" | "//" | "!=" | "!~" | "!//";
                    /** @description The case sensitivity of the match. Defaults to false if unspecified. */
                    cs?: boolean;
                } | {
                    /**
                     * @description The type of match to perform
                     * '*' = exists with any value
                     * '!*' = does not exist
                     */
                    op: "*" | "!*";
                };
                /** @description Describes a match expression on a number */
                NumberMatch: {
                    /** @description The right hand side of the match expression */
                    rhs: number;
                    /**
                     * @description The type of match to perform
                     * '=' = exact match
                     * '!=' = not an exact match
                     * '<' = less than match expression
                     * '>' = greater than match expression
                     */
                    op: "=" | "<" | ">" | "!=";
                };
                /** @description Defines an aggregate dimension that is a grouping of other dimensions' scores; an intent or audience. */
                AggregateDimension: {
                    /** @description Input dimensions to the aggregate dimension */
                    inputs: external$4["uniform-context-types.swagger.yml"]["components"]["schemas"]["AggregateDimensionInput"][];
                };
                /** @description Defines an input dimension to an aggregate dimension */
                AggregateDimensionInput: {
                    /**
                     * @description Dimension name to reference as an input.
                     * For enrichment inputs, use CATEGORY_KEY as the dimension.
                     * Enrichments, signals, and other aggregate dimensions may be referenced.
                     *
                     * Note that creating a cycle of aggregate dimensions is allowed, however
                     * the final score will _ignore_ the cycled aggregate dimension in the result.
                     * This can be used to create mutually exclusive aggregates.
                     */
                    dim: string;
                    /**
                     * @description The sign of the input dimension controls how it affects the aggregate dimension's final score.
                     *
                     * '+' = add to the final score
                     * '-' = subtract from the final score
                     * 'c' = clear the final score (if the input dimension has any score at all, this aggreate will have no score regardless of other inputs)
                     *
                     * Default if unspecified: '+'
                     *
                     * @default +
                     */
                    sign?: "+" | "-" | "c";
                };
                Test: {
                    /** @description Winning variation ID - if set, the test will not run and this variation is shown to all visitors (the test is closed) */
                    wv?: string;
                };
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$3 {
    "/api/v2/dimension": {
        get: {
            parameters: {
                query: {
                    /** The project to fetch dimensions for */
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            dimensions: components$4["schemas"]["DimensionDefinition"][];
                        };
                    };
                };
                400: external$3["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$3["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$3["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$3["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$3["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
    };
}
interface components$4 {
    schemas: {
        DimensionDefinition: {
            /** @description The dimension name (score key) */
            dim: string;
            /**
             * @description The dimension type
             * AGG: Aggregation (intent or audience)
             * ENR: Enrichment
             * SIG: Signal
             */
            category: "AGG" | "ENR" | "SIG";
            /**
             * @description Subtype of the dimension
             * AGG:0: Audience
             * AGG:1: Intent
             * ENR: Enrichment Category name
             * SIG: null
             */
            subcategory?: string;
            /** @description The dimension's name (without category) */
            name: string;
            /** @description The minimum score possible for the dimension */
            min: number;
            /** @description The maximum score possible for the dimension */
            cap: number;
        };
    };
}
interface external$3 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$3["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$3["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$3["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$2 {
    "/api/v2/quirk": {
        /** Gets quirk definitions for a project */
        get: {
            parameters: {
                query: {
                    /** The project to fetch quirk definitions for */
                    projectId: string;
                    /** Limit the results to a specific quirk ID */
                    quirkId?: string;
                    /** Include quirks that are defined by integrations */
                    withIntegrations?: boolean;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            quirks: components$3["schemas"]["Quirk"][];
                        };
                    };
                };
                400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        quirk: components$3["schemas"]["Quirk"];
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        quirkId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface components$3 {
    schemas: {
        Quirk: {
            id: string;
            name: string;
            description?: string | null;
            options?: components$3["schemas"]["QuirkOptions"][];
            source?: components$3["schemas"]["QuirkSource"];
        };
        QuirkOptions: {
            name: string;
            value: string;
        };
        /** @description The source of this quirk. When not defined, it is user specified. */
        QuirkSource: {
            name: string;
            id: string;
        };
    };
}
interface external$2 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$1 {
    "/api/v2/test": {
        /** Gets A/B test definitions for a project */
        get: {
            parameters: {
                query: {
                    /** The project to fetch tests for */
                    projectId: string;
                    /** Limit the results to a specific test public ID */
                    testId?: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            tests: components$2["schemas"]["Test"][];
                        };
                    };
                };
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        test: components$2["schemas"]["Test"];
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        testId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface components$2 {
    schemas: {
        Test: {
            id: string;
            name: string;
            winning_variant_id?: string;
            default_variant_id?: string;
            closed?: boolean;
        };
    };
}
interface external$1 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    "/api/v2/signal": {
        get: {
            parameters: {
                query: {
                    /** The project to fetch signals for */
                    projectId: string;
                    /** Limit the results to a specific signal ID */
                    signalId?: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            signals: components$1["schemas"]["SignalWithId"][];
                        };
                    };
                };
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        signal: components$1["schemas"]["SignalWithId"];
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        signalId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface components$1 {
    schemas: {
        SignalWithId: {
            id: string;
        } & external["uniform-context-types.swagger.yml"]["components"]["schemas"]["PreviewSignal"];
    };
}
interface external {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-context-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                EnrichmentCategory: {
                    /** @description The maximum visitor score allowed for enrichment keys in this category */
                    cap: number;
                };
                PreviewSignal: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["Signal"] & {
                    /** @description Friendly name of the signal */
                    name: string;
                    /** @description Description of the signal */
                    description?: string;
                };
                Signal: {
                    /** @description The signal strength per activation (each time its criteria are true, this score is added) */
                    str: number;
                    /** @description The maximum visitor score allowed for this signal */
                    cap: number;
                    /**
                     * @description How long the signal's score should persist
                     * 's' = current session (expires after a period of inactivity)
                     * 'p' = permanent (expires as far in the future as possible, may be limited by browser security settings)
                     * 't' = transient (score tracks the current state of the criteria every time scores are updated)
                     */
                    dur: "s" | "p" | "t";
                    crit: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["RootSignalCriteriaGroup"];
                };
                RootSignalCriteriaGroup: {
                    /** @description Criteria type (Group of other criteria) */
                    type: "G";
                    /**
                     * @description The logical operator to apply to the criteria groups
                     * & = AND
                     * | = OR
                     *
                     * Default is `&` if unspecified.
                     *
                     * @default &
                     */
                    op?: "&" | "|";
                    /** @description The criteria clauses that make up this grouping of criteria */
                    clauses: (external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteriaGroup"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteria"])[];
                };
                SignalCriteriaGroup: {
                    /** @description Criteria type (Group of other criteria) */
                    type: "G";
                    /**
                     * @description The logical operator to apply to the criteria groups
                     * & = AND
                     * | = OR
                     *
                     * Default is `&` if unspecified.
                     */
                    op?: "&" | "|";
                    /** @description The criteria clauses that make up this grouping of criteria */
                    clauses: (external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteriaGroup"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["SignalCriteria"])[];
                };
                SignalCriteria: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["CookieCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["QueryStringCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["QuirkCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["EventCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["CurrentPageCriteria"] | external["uniform-context-types.swagger.yml"]["components"]["schemas"]["PageViewCountCriteria"];
                /** @description Matches a URL query string parameter value */
                QueryStringCriteria: {
                    type: "QS";
                    /** @description The name of the query string parameter to match */
                    queryName: string;
                    /** @description The value to match the query string parameter against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches a web cookie value */
                CookieCriteria: {
                    type: "CK";
                    /** @description The name of the cookie to match */
                    cookieName: string;
                    /** @description The value to match the cookie against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches a visitor quirk key and value */
                QuirkCriteria: {
                    type: "QK";
                    /** @description The name of the quirk key to match */
                    key: string;
                    /** @description The quirk value to match against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /** @description Matches an analytics event name being fired */
                EventCriteria: {
                    type: "EVT";
                    /** @description How to match the event name */
                    event: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                /**
                 * @description Matches the current page's absolute path (i.e. /path/to/page.html)
                 * Does not include the query string or protocol and hostname (i.e. NOT https://foo.com/path/to/page.html?query=something)
                 */
                CurrentPageCriteria: {
                    type: "PV";
                    /** @description The page/route path to match as a page that has been visited */
                    path: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["StringMatch"];
                };
                PageViewCountCriteria: {
                    type: "PVC";
                    /** @description The expression to match the page view count against */
                    match: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["NumberMatch"];
                };
                /** @description Describes a match expression on a string */
                StringMatch: {
                    /** @description The right hand side of the match expression */
                    rhs: string;
                    /**
                     * @description The match operator
                     * '=' = exact match
                     * '~' = contains match
                     * '//' = regular expression match
                     *
                     * Any of the above can be prefixed with '!' to invert the match (i.e. != for 'not an exact match')
                     */
                    op: "=" | "~" | "//" | "!=" | "!~" | "!//";
                    /** @description The case sensitivity of the match. Defaults to false if unspecified. */
                    cs?: boolean;
                } | {
                    /**
                     * @description The type of match to perform
                     * '*' = exists with any value
                     * '!*' = does not exist
                     */
                    op: "*" | "!*";
                };
                /** @description Describes a match expression on a number */
                NumberMatch: {
                    /** @description The right hand side of the match expression */
                    rhs: number;
                    /**
                     * @description The type of match to perform
                     * '=' = exact match
                     * '!=' = not an exact match
                     * '<' = less than match expression
                     * '>' = greater than match expression
                     */
                    op: "=" | "<" | ">" | "!=";
                };
                /** @description Defines an aggregate dimension that is a grouping of other dimensions' scores; an intent or audience. */
                AggregateDimension: {
                    /** @description Input dimensions to the aggregate dimension */
                    inputs: external["uniform-context-types.swagger.yml"]["components"]["schemas"]["AggregateDimensionInput"][];
                };
                /** @description Defines an input dimension to an aggregate dimension */
                AggregateDimensionInput: {
                    /**
                     * @description Dimension name to reference as an input.
                     * For enrichment inputs, use CATEGORY_KEY as the dimension.
                     * Enrichments, signals, and other aggregate dimensions may be referenced.
                     *
                     * Note that creating a cycle of aggregate dimensions is allowed, however
                     * the final score will _ignore_ the cycled aggregate dimension in the result.
                     * This can be used to create mutually exclusive aggregates.
                     */
                    dim: string;
                    /**
                     * @description The sign of the input dimension controls how it affects the aggregate dimension's final score.
                     *
                     * '+' = add to the final score
                     * '-' = subtract from the final score
                     * 'c' = clear the final score (if the input dimension has any score at all, this aggreate will have no score regardless of other inputs)
                     *
                     * Default if unspecified: '+'
                     *
                     * @default +
                     */
                    sign?: "+" | "-" | "c";
                };
                Test: {
                    /** @description Winning variation ID - if set, the test will not run and this variation is shown to all visitors (the test is closed) */
                    wv?: string;
                };
            };
        };
        operations: {};
    };
}

interface components {
    schemas: {
        EnrichmentCategory: {
            /** @description The maximum visitor score allowed for enrichment keys in this category */
            cap: number;
        };
        PreviewSignal: components["schemas"]["Signal"] & {
            /** @description Friendly name of the signal */
            name: string;
            /** @description Description of the signal */
            description?: string;
        };
        Signal: {
            /** @description The signal strength per activation (each time its criteria are true, this score is added) */
            str: number;
            /** @description The maximum visitor score allowed for this signal */
            cap: number;
            /**
             * @description How long the signal's score should persist
             * 's' = current session (expires after a period of inactivity)
             * 'p' = permanent (expires as far in the future as possible, may be limited by browser security settings)
             * 't' = transient (score tracks the current state of the criteria every time scores are updated)
             */
            dur: "s" | "p" | "t";
            crit: components["schemas"]["RootSignalCriteriaGroup"];
        };
        RootSignalCriteriaGroup: {
            /** @description Criteria type (Group of other criteria) */
            type: "G";
            /**
             * @description The logical operator to apply to the criteria groups
             * & = AND
             * | = OR
             *
             * Default is `&` if unspecified.
             *
             * @default &
             */
            op?: "&" | "|";
            /** @description The criteria clauses that make up this grouping of criteria */
            clauses: (components["schemas"]["SignalCriteriaGroup"] | components["schemas"]["SignalCriteria"])[];
        };
        SignalCriteriaGroup: {
            /** @description Criteria type (Group of other criteria) */
            type: "G";
            /**
             * @description The logical operator to apply to the criteria groups
             * & = AND
             * | = OR
             *
             * Default is `&` if unspecified.
             */
            op?: "&" | "|";
            /** @description The criteria clauses that make up this grouping of criteria */
            clauses: (components["schemas"]["SignalCriteriaGroup"] | components["schemas"]["SignalCriteria"])[];
        };
        SignalCriteria: components["schemas"]["CookieCriteria"] | components["schemas"]["QueryStringCriteria"] | components["schemas"]["QuirkCriteria"] | components["schemas"]["EventCriteria"] | components["schemas"]["CurrentPageCriteria"] | components["schemas"]["PageViewCountCriteria"];
        /** @description Matches a URL query string parameter value */
        QueryStringCriteria: {
            type: "QS";
            /** @description The name of the query string parameter to match */
            queryName: string;
            /** @description The value to match the query string parameter against */
            match: components["schemas"]["StringMatch"];
        };
        /** @description Matches a web cookie value */
        CookieCriteria: {
            type: "CK";
            /** @description The name of the cookie to match */
            cookieName: string;
            /** @description The value to match the cookie against */
            match: components["schemas"]["StringMatch"];
        };
        /** @description Matches a visitor quirk key and value */
        QuirkCriteria: {
            type: "QK";
            /** @description The name of the quirk key to match */
            key: string;
            /** @description The quirk value to match against */
            match: components["schemas"]["StringMatch"];
        };
        /** @description Matches an analytics event name being fired */
        EventCriteria: {
            type: "EVT";
            /** @description How to match the event name */
            event: components["schemas"]["StringMatch"];
        };
        /**
         * @description Matches the current page's absolute path (i.e. /path/to/page.html)
         * Does not include the query string or protocol and hostname (i.e. NOT https://foo.com/path/to/page.html?query=something)
         */
        CurrentPageCriteria: {
            type: "PV";
            /** @description The page/route path to match as a page that has been visited */
            path: components["schemas"]["StringMatch"];
        };
        PageViewCountCriteria: {
            type: "PVC";
            /** @description The expression to match the page view count against */
            match: components["schemas"]["NumberMatch"];
        };
        /** @description Describes a match expression on a string */
        StringMatch: {
            /** @description The right hand side of the match expression */
            rhs: string;
            /**
             * @description The match operator
             * '=' = exact match
             * '~' = contains match
             * '//' = regular expression match
             *
             * Any of the above can be prefixed with '!' to invert the match (i.e. != for 'not an exact match')
             */
            op: "=" | "~" | "//" | "!=" | "!~" | "!//";
            /** @description The case sensitivity of the match. Defaults to false if unspecified. */
            cs?: boolean;
        } | {
            /**
             * @description The type of match to perform
             * '*' = exists with any value
             * '!*' = does not exist
             */
            op: "*" | "!*";
        };
        /** @description Describes a match expression on a number */
        NumberMatch: {
            /** @description The right hand side of the match expression */
            rhs: number;
            /**
             * @description The type of match to perform
             * '=' = exact match
             * '!=' = not an exact match
             * '<' = less than match expression
             * '>' = greater than match expression
             */
            op: "=" | "<" | ">" | "!=";
        };
        /** @description Defines an aggregate dimension that is a grouping of other dimensions' scores; an intent or audience. */
        AggregateDimension: {
            /** @description Input dimensions to the aggregate dimension */
            inputs: components["schemas"]["AggregateDimensionInput"][];
        };
        /** @description Defines an input dimension to an aggregate dimension */
        AggregateDimensionInput: {
            /**
             * @description Dimension name to reference as an input.
             * For enrichment inputs, use CATEGORY_KEY as the dimension.
             * Enrichments, signals, and other aggregate dimensions may be referenced.
             *
             * Note that creating a cycle of aggregate dimensions is allowed, however
             * the final score will _ignore_ the cycled aggregate dimension in the result.
             * This can be used to create mutually exclusive aggregates.
             */
            dim: string;
            /**
             * @description The sign of the input dimension controls how it affects the aggregate dimension's final score.
             *
             * '+' = add to the final score
             * '-' = subtract from the final score
             * 'c' = clear the final score (if the input dimension has any score at all, this aggreate will have no score regardless of other inputs)
             *
             * Default if unspecified: '+'
             *
             * @default +
             */
            sign?: "+" | "-" | "c";
        };
        Test: {
            /** @description Winning variation ID - if set, the test will not run and this variation is shown to all visitors (the test is closed) */
            wv?: string;
        };
    };
}

declare type EnrichmentGet = paths$6['/api/v1/enrichments']['get'];
declare type EnrichmentGetParameters = EnrichmentGet['parameters']['query'];
declare type EnrichmentGetResponse = EnrichmentGet['responses']['200']['content']['application/json'];
declare type EnrichmentCategory = components$6['schemas']['EnrichmentCategory'];
declare type EnrichmentCategoryWithValues = components$6['schemas']['EnrichmentCategoryWithValues'];
declare type EnrichmentValue = components$6['schemas']['EnrichmentValue'];
declare type EnrichmentPut = paths$6['/api/v1/enrichments']['put'];
declare type EnrichmentPutParameters = EnrichmentPut['requestBody']['content']['application/json'];
declare type EnrichmentDelete = paths$6['/api/v1/enrichments']['delete'];
declare type EnrichmentDeleteParameters = EnrichmentDelete['requestBody']['content']['application/json'];
declare type EnrichmentValuePut = paths$5['/api/v1/enrichment-values']['put'];
declare type EnrichmentValuePutParameters = EnrichmentValuePut['requestBody']['content']['application/json'];
declare type EnrichmentValueDelete = paths$5['/api/v1/enrichment-values']['delete'];
declare type EnrichmentValueDeleteParameters = EnrichmentValueDelete['requestBody']['content']['application/json'];
declare type ManifestGet = paths$7['/api/v2/manifest']['get'];
declare type ManifestGetParameters = ManifestGet['parameters']['query'];
declare type ManifestGetResponse = ManifestGet['responses']['200']['content']['application/json'];
declare type AggregateGet = paths$4['/api/v2/aggregate']['get'];
declare type AggregateGetParameters = AggregateGet['parameters']['query'];
declare type AggregateGetResponse = AggregateGet['responses']['200']['content']['application/json'];
declare type Aggregate = components$5['schemas']['AggregateData'];
declare type AggregatePut = paths$4['/api/v2/aggregate']['put'];
declare type AggregatePutParameters = AggregatePut['requestBody']['content']['application/json'];
declare type AggregateDelete = paths$4['/api/v2/aggregate']['delete'];
declare type AggregateDeleteParameters = AggregateDelete['requestBody']['content']['application/json'];
declare type DimensionGet = paths$3['/api/v2/dimension']['get'];
declare type DimensionGetParameters = DimensionGet['parameters']['query'];
declare type DimensionGetResponse = DimensionGet['responses']['200']['content']['application/json'];
declare type DimensionDefinition = components$4['schemas']['DimensionDefinition'];
declare type QuirkGet = paths$2['/api/v2/quirk']['get'];
declare type QuirkGetParameters = QuirkGet['parameters']['query'];
declare type QuirkGetResponse = QuirkGet['responses']['200']['content']['application/json'];
declare type Quirk = components$3['schemas']['Quirk'];
declare type QuirkPut = paths$2['/api/v2/quirk']['put'];
declare type QuirkPutParameters = QuirkPut['requestBody']['content']['application/json'];
declare type QuirkDelete = paths$2['/api/v2/quirk']['delete'];
declare type QuirkDeleteParameters = QuirkDelete['requestBody']['content']['application/json'];
declare type TestGet = paths$1['/api/v2/test']['get'];
declare type TestGetParameters = TestGet['parameters']['query'];
declare type TestGetResponse = TestGet['responses']['200']['content']['application/json'];
declare type Test = components$2['schemas']['Test'];
declare type TestPut = paths$1['/api/v2/test']['put'];
declare type TestPutParameters = TestPut['requestBody']['content']['application/json'];
declare type TestDelete = paths$1['/api/v2/test']['delete'];
declare type TestDeleteParameters = TestDelete['requestBody']['content']['application/json'];
declare type SignalGet = paths['/api/v2/signal']['get'];
declare type SignalGetParameters = SignalGet['parameters']['query'];
declare type SignalGetResponse = SignalGet['responses']['200']['content']['application/json'];
declare type SignalWithId = components$1['schemas']['SignalWithId'];
declare type RootSignalCriteriaGroup = components['schemas']['RootSignalCriteriaGroup'];
declare type CookieCriteria = components['schemas']['CookieCriteria'];
declare type QueryStringCriteria = components['schemas']['QueryStringCriteria'];
declare type QuirkCriteria = components['schemas']['QuirkCriteria'];
declare type EventCriteria = components['schemas']['EventCriteria'];
declare type CurrentPageCriteria = components['schemas']['CurrentPageCriteria'];
declare type PageViewCountCriteria = components['schemas']['PageViewCountCriteria'];
declare type SignalPut = paths['/api/v2/signal']['put'];
declare type SignalPutParameters = SignalPut['requestBody']['content']['application/json'];
declare type SignalDelete = paths['/api/v2/signal']['delete'];
declare type SignalDeleteParameters = SignalDelete['requestBody']['content']['application/json'];

export { Aggregate as A, EnrichmentValue as B, CookieCriteria as C, DimensionGetParameters as D, EnrichmentCategoryWithValues as E, QueryStringCriteria as F, QuirkCriteria as G, EventCriteria as H, CurrentPageCriteria as I, ManifestGetParameters as M, PageViewCountCriteria as P, Quirk as Q, RootSignalCriteriaGroup as R, SignalWithId as S, Test as T, AggregateGetParameters as a, AggregateGetResponse as b, AggregatePutParameters as c, AggregateDeleteParameters as d, DimensionGetResponse as e, EnrichmentGetParameters as f, EnrichmentGetResponse as g, EnrichmentPutParameters as h, EnrichmentDeleteParameters as i, EnrichmentValuePutParameters as j, EnrichmentValueDeleteParameters as k, ManifestGetResponse as l, QuirkGetParameters as m, QuirkGetResponse as n, QuirkPutParameters as o, QuirkDeleteParameters as p, SignalGetParameters as q, SignalGetResponse as r, SignalPutParameters as s, SignalDeleteParameters as t, TestGetParameters as u, TestGetResponse as v, TestPutParameters as w, TestDeleteParameters as x, DimensionDefinition as y, EnrichmentCategory as z };
