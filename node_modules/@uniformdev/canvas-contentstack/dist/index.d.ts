import { EnhancerContext, ComponentParameter, ComponentInstance, LimitPolicy, ComponentParameterEnhancer } from '@uniformdev/canvas';
import contentstack from 'contentstack';

declare type Entry<TFields = unknown> = {
    uid: string;
    created_by: string;
    updated_by: string;
    created_at: Date;
    updated_at: Date;
    _version: number;
    _in_progress: boolean;
    tags: string[];
    locale: string;
    url: string;
    /** Title */
    title: string;
} & TFields;

interface EntrySelectorParameterValue {
    entryUid: string;
    contentTypeUid: string;
}
declare type AddContentstackQueryOptions<TContext extends EnhancerContext = EnhancerContext> = {
    parameterName: string;
    parameter: ComponentParameter<EntrySelectorParameterValue>;
    component: ComponentInstance;
    query: contentstack.Entry;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
/** The default shape of the result value of the Contentstack enhancer. Note that this can change if the query is altered. */
declare type ContentstackEnhancerResult<TFields> = Entry<TFields>;
declare const CANVAS_CONTENTSTACK_PARAMETER_TYPES: readonly string[];
declare function createContentstackEnhancer({ client, previewClient, addEntryQueryOptions, useBatching, limitPolicy, }: {
    client: contentstack.Stack;
    previewClient?: contentstack.Stack;
    addEntryQueryOptions?: (options: AddContentstackQueryOptions) => contentstack.Entry | undefined;
    useBatching?: boolean;
    limitPolicy?: LimitPolicy;
}): ComponentParameterEnhancer<EntrySelectorParameterValue, ContentstackEnhancerResult<unknown>>;

interface EntryMultiSelectorParameterValue {
    entries: EntrySelectorParameterValue[];
}
declare type AddContentstackMultiEnhancerOptions<TContext extends EnhancerContext = EnhancerContext> = {
    parameterName: string;
    parameter: ComponentParameter<EntryMultiSelectorParameterValue>;
    component: ComponentInstance;
    query: contentstack.Entry;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
/** The default shape of the result value of the Contentstack enhancer. Note that this can change if the query is altered. */
declare type ContentstackMultiEnhancerResult<TFields> = Entry<TFields>[];
declare const CANVAS_CONTENTSTACK_MULTI_PARAMETER_TYPES: readonly string[];
declare function createContentstackMultiEnhancer({ client, previewClient, addEntryQueryOptions, useBatching, limitPolicy, }: {
    client: contentstack.Stack;
    previewClient?: contentstack.Stack;
    addEntryQueryOptions?: (options: AddContentstackMultiEnhancerOptions) => contentstack.Entry | undefined;
    useBatching?: boolean;
    limitPolicy?: LimitPolicy;
}): ComponentParameterEnhancer<EntryMultiSelectorParameterValue, ContentstackMultiEnhancerResult<unknown>>;

interface EntryQuerySelectorParameterValue {
    contentType: {
        id: string;
        name: string;
    };
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
    limit: number | string;
}
declare type AddContentstackQueryEnhancerOptions<TContext extends EnhancerContext = EnhancerContext> = {
    parameterName: string;
    parameter: ComponentParameter<EntryQuerySelectorParameterValue>;
    component: ComponentInstance;
    query: contentstack.Query;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
/** The default shape of the result value of the Contentstack enhancer. Note that this can change if the query is altered. */
declare type ContentstackQueryEnhancerResult<TFields> = Entry<TFields>[];
declare const CANVAS_CONTENTSTACK_QUERY_PARAMETER_TYPES: readonly string[];
declare function createContentstackQueryEnhancer({ client, previewClient, addEntryQueryOptions, useBatching, limitPolicy, }: {
    client: contentstack.Stack;
    previewClient?: contentstack.Stack;
    addEntryQueryOptions?: (options: AddContentstackQueryEnhancerOptions) => contentstack.Query | undefined;
    useBatching?: boolean;
    limitPolicy?: LimitPolicy;
}): ComponentParameterEnhancer<EntryQuerySelectorParameterValue, ContentstackQueryEnhancerResult<unknown>>;

export { AddContentstackMultiEnhancerOptions, AddContentstackQueryEnhancerOptions, AddContentstackQueryOptions, CANVAS_CONTENTSTACK_MULTI_PARAMETER_TYPES, CANVAS_CONTENTSTACK_PARAMETER_TYPES, CANVAS_CONTENTSTACK_QUERY_PARAMETER_TYPES, ContentstackEnhancerResult, ContentstackMultiEnhancerResult, ContentstackQueryEnhancerResult, EntryMultiSelectorParameterValue, EntryQuerySelectorParameterValue, EntrySelectorParameterValue, createContentstackEnhancer, createContentstackMultiEnhancer, createContentstackQueryEnhancer };
