declare enum ReturnTypeEnums {
    ALL_CLOSEST_MATCHES = "all-closest-matches",
    ALL_MATCHES = "all-matches",
    ALL_SORTED_MATCHES = "all-sorted-matches",
    FIRST_CLOSEST_MATCH = "first-closest-match",
    FIRST_MATCH = "first-match"
}

declare enum ThresholdTypeEnums {
    EDIT_DISTANCE = "edit-distance",
    SIMILARITY = "similarity"
}

declare type MatchItem = Record<string, unknown> | string;
declare type Options = Readonly<{
    caseSensitive: boolean;
    deburr: boolean;
    matchPath: ReadonlyArray<number | string>;
    returnType: ReturnTypeEnums;
    threshold: number;
    thresholdType: ThresholdTypeEnums;
    trimSpaces: boolean;
}>;

declare function didYouMean<T extends MatchItem>(input: string, matchList: ReadonlyArray<T>, options?: Partial<Options> & Readonly<{
    returnType?: ReturnTypeEnums.FIRST_CLOSEST_MATCH | ReturnTypeEnums.FIRST_MATCH;
}>): T | null;
declare function didYouMean<T extends MatchItem>(input: string, matchList: ReadonlyArray<T>, options: Partial<Options> & Readonly<{
    returnType: ReturnTypeEnums.ALL_CLOSEST_MATCHES | ReturnTypeEnums.ALL_MATCHES | ReturnTypeEnums.ALL_SORTED_MATCHES;
}>): Array<T>;

export default didYouMean;
export { ReturnTypeEnums, ThresholdTypeEnums };
