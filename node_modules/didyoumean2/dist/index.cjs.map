{"version":3,"file":"index.cjs","sources":["../src/enums/ReturnTypeEnums.ts","../src/enums/ThresholdTypeEnums.ts","../src/errors.ts","../src/lib/normalizeString.ts","../src/lib/matchItemProcessor.ts","../src/index.ts","../src/lib/fillDefaultOptions.ts","../src/lib/getSimilarity.ts","../src/lib/resultProcessor.ts"],"sourcesContent":["export enum ReturnTypeEnums {\n  ALL_CLOSEST_MATCHES = 'all-closest-matches',\n  ALL_MATCHES = 'all-matches',\n  ALL_SORTED_MATCHES = 'all-sorted-matches',\n  FIRST_CLOSEST_MATCH = 'first-closest-match',\n  FIRST_MATCH = 'first-match',\n}\n","export enum ThresholdTypeEnums {\n  EDIT_DISTANCE = 'edit-distance',\n  SIMILARITY = 'similarity',\n}\n","export const unknownReturnTypeError = new Error('unknown returnType')\nexport const unknownThresholdTypeError = new Error('unknown thresholdType')\n","import deburr from 'lodash.deburr'\n\nimport type { Options } from '../types'\n\n/**\n * Normalize a string\n *\n * @param {string} str - any string\n * @param {Object} options - options that allows you to modify the behavior\n * @returns {string} - normalized string\n */\nconst normalizeString = (str: string, options: Options): string => {\n  let s = str\n\n  if (options.trimSpaces) {\n    s = s.trim().replace(/\\s+/g, ' ')\n  }\n\n  if (options.deburr) {\n    s = deburr(s)\n  }\n\n  if (!options.caseSensitive) {\n    s = s.toLowerCase()\n  }\n\n  return s\n}\n\nexport default normalizeString\n","import type { MatchItem, Options } from '../types'\nimport normalizeString from './normalizeString'\n\nconst getMatchItemStr = (\n  matchItem: MatchItem,\n  matchPath: Options['matchPath'],\n): string => {\n  const matchItemStr =\n    matchPath.length > 0\n      ? matchPath.reduce<unknown>(\n          (acc, prop) => (acc as any)?.[prop],\n          matchItem,\n        )\n      : matchItem\n  if (typeof matchItemStr !== 'string') return ''\n  return matchItemStr\n}\n\n/**\n * Process matchItem according to options\n *\n * @param {Object|string} matchItem - Item for matching with `input`\n * @param {Object} options - options that allows you to modify the behavior\n * @returns {string} - processed matchItem\n */\nconst matchItemProcessor = (matchItem: MatchItem, options: Options): string => {\n  const { matchPath } = options\n\n  const matchItemStr = getMatchItemStr(matchItem, matchPath)\n\n  return normalizeString(matchItemStr, options)\n}\n\nexport default matchItemProcessor\n","import { distance } from 'fastest-levenshtein'\n\nimport { ReturnTypeEnums } from './enums/ReturnTypeEnums'\nimport { ThresholdTypeEnums } from './enums/ThresholdTypeEnums'\nimport { unknownReturnTypeError, unknownThresholdTypeError } from './errors'\nimport fillDefaultOptions from './lib/fillDefaultOptions'\nimport getSimilarity from './lib/getSimilarity'\nimport matchItemProcessor from './lib/matchItemProcessor'\nimport normalizeString from './lib/normalizeString'\nimport resultProcessor from './lib/resultProcessor'\nimport type { MatchItem, Options } from './types'\n\nfunction didYouMean<T extends MatchItem>(\n  input: string,\n  matchList: ReadonlyArray<T>,\n  options?: Partial<Options> &\n    Readonly<{\n      returnType?:\n        | ReturnTypeEnums.FIRST_CLOSEST_MATCH\n        | ReturnTypeEnums.FIRST_MATCH\n    }>,\n): T | null\nfunction didYouMean<T extends MatchItem>(\n  input: string,\n  matchList: ReadonlyArray<T>,\n  options: Partial<Options> &\n    Readonly<{\n      returnType:\n        | ReturnTypeEnums.ALL_CLOSEST_MATCHES\n        | ReturnTypeEnums.ALL_MATCHES\n        | ReturnTypeEnums.ALL_SORTED_MATCHES\n    }>,\n): Array<T>\n/**\n * Main function for didyoumean2\n *\n * @param {string} input - string that you are not sure and want to match with `matchList`\n * @param {Object[]|string[]} matchList - List for matching with `input`\n * @param {null|Object|undefined} options - options that allows you to modify the behavior\n * @returns {Array|null|Object|string} - matched result(s), return object if `match` is `{Object[]}`\n */\nfunction didYouMean<T extends MatchItem>(\n  input: string,\n  matchList: ReadonlyArray<T>,\n  options?: Partial<Options>,\n): Array<T> | T | null {\n  /*+++++++++++++++++++\n   + Initiate options +\n   +++++++++++++++++++*/\n\n  const optionsWithDefaults = fillDefaultOptions(options)\n\n  const { returnType, threshold, thresholdType } = optionsWithDefaults\n\n  /*++++++++++++++++++++\n   + Deal with options +\n   ++++++++++++++++++++*/\n\n  const normalizedInput = normalizeString(input, optionsWithDefaults)\n\n  let checkIfMatched: (score: number) => boolean // Validate if score is matched\n  let scoreProcessor: (matchItem: T) => number // Get score\n  switch (thresholdType) {\n    case ThresholdTypeEnums.EDIT_DISTANCE:\n      checkIfMatched = (score: number) => score <= threshold\n      scoreProcessor = (matchItem: T) =>\n        distance(\n          normalizedInput,\n          matchItemProcessor(matchItem, optionsWithDefaults),\n        )\n      break\n\n    case ThresholdTypeEnums.SIMILARITY:\n      checkIfMatched = (score: number) => score >= threshold\n      scoreProcessor = (matchItem: T) =>\n        getSimilarity(\n          normalizedInput,\n          matchItemProcessor(matchItem, optionsWithDefaults),\n        )\n      break\n\n    /* istanbul ignore next */ default:\n      throw unknownThresholdTypeError\n  }\n\n  /*+++++++++++\n   + Matching +\n   +++++++++++*/\n\n  const matchedIndexes: number[] = []\n  const matchListLen = matchList.length\n\n  switch (returnType) {\n    case ReturnTypeEnums.ALL_CLOSEST_MATCHES:\n    case ReturnTypeEnums.FIRST_CLOSEST_MATCH: {\n      const scores: number[] = []\n\n      let marginValue: number\n      switch (thresholdType) {\n        case ThresholdTypeEnums.EDIT_DISTANCE:\n          // Process score and save the smallest score\n          marginValue = Infinity\n          for (let i = 0; i < matchListLen; i += 1) {\n            const score = scoreProcessor(matchList[i])\n\n            if (marginValue > score) marginValue = score\n\n            scores.push(score)\n          }\n          break\n\n        case ThresholdTypeEnums.SIMILARITY:\n          // Process score and save the largest score\n          marginValue = 0\n          for (let i = 0; i < matchListLen; i += 1) {\n            const score = scoreProcessor(matchList[i])\n\n            if (marginValue < score) marginValue = score\n\n            scores.push(score)\n          }\n          break\n\n        /* istanbul ignore next */ default:\n          throw unknownThresholdTypeError\n      }\n\n      const scoresLen = scores.length\n      for (let i = 0; i < scoresLen; i += 1) {\n        const score = scores[i]\n\n        if (checkIfMatched(score) && score === marginValue) {\n          matchedIndexes.push(i)\n        }\n      }\n\n      break\n    }\n\n    case ReturnTypeEnums.ALL_MATCHES:\n      for (let i = 0; i < matchListLen; i += 1) {\n        const score = scoreProcessor(matchList[i])\n\n        // save all indexes of matched scores\n        if (checkIfMatched(score)) {\n          matchedIndexes.push(i)\n        }\n      }\n\n      break\n\n    case ReturnTypeEnums.ALL_SORTED_MATCHES: {\n      const unsortedResults: Array<{\n        score: number\n        index: number\n      }> = []\n      for (let i = 0; i < matchListLen; i += 1) {\n        const score = scoreProcessor(matchList[i])\n\n        // save all indexes of matched scores\n        if (checkIfMatched(score)) {\n          unsortedResults.push({\n            score,\n            index: i,\n          })\n        }\n      }\n\n      switch (thresholdType) {\n        case ThresholdTypeEnums.EDIT_DISTANCE:\n          unsortedResults.sort((a, b) => a.score - b.score)\n          break\n\n        case ThresholdTypeEnums.SIMILARITY:\n          unsortedResults.sort((a, b) => b.score - a.score)\n          break\n\n        /* istanbul ignore next */ default:\n          throw unknownThresholdTypeError\n      }\n\n      for (const unsortedResult of unsortedResults) {\n        matchedIndexes.push(unsortedResult.index)\n      }\n\n      break\n    }\n\n    case ReturnTypeEnums.FIRST_MATCH:\n      for (let i = 0; i < matchListLen; i += 1) {\n        const score = scoreProcessor(matchList[i])\n\n        // Return once matched, performance is main target in this returnType\n        if (checkIfMatched(score)) {\n          matchedIndexes.push(i)\n          break\n        }\n      }\n\n      break\n\n    /* istanbul ignore next */ default:\n      throw unknownReturnTypeError\n  }\n\n  /*+++++++++++++++++++++++\n   + Process return value +\n   +++++++++++++++++++++++*/\n\n  return resultProcessor(matchList, matchedIndexes, returnType)\n}\n\nexport default didYouMean\nexport { ReturnTypeEnums, ThresholdTypeEnums }\n","import { ReturnTypeEnums } from '../enums/ReturnTypeEnums'\nimport { ThresholdTypeEnums } from '../enums/ThresholdTypeEnums'\nimport { unknownThresholdTypeError } from '../errors'\nimport type { Options } from '../types'\n\nconst fillDefaultOptions = (options?: Partial<Options>): Options => {\n  const optionsWithDefaultValues = {\n    caseSensitive: false,\n    deburr: true,\n    matchPath: [],\n    returnType: ReturnTypeEnums.FIRST_CLOSEST_MATCH,\n    thresholdType: ThresholdTypeEnums.SIMILARITY,\n    trimSpaces: true,\n    ...options,\n  }\n\n  switch (optionsWithDefaultValues.thresholdType) {\n    case ThresholdTypeEnums.EDIT_DISTANCE:\n      return {\n        threshold: 20,\n        ...optionsWithDefaultValues,\n      }\n\n    case ThresholdTypeEnums.SIMILARITY:\n      return {\n        threshold: 0.4,\n        ...optionsWithDefaultValues,\n      }\n\n    default:\n      throw unknownThresholdTypeError\n  }\n}\nexport default fillDefaultOptions\n","import { distance } from 'fastest-levenshtein'\n\n/**\n * Using edit distance between `a` and `b` to calculate similarity\n *\n * @param {string} a - `input`\n * @param {string} b - String from `matchList`\n * @returns {number} similarity between `a` and `b`\n */\nconst getSimilarity = (a: string, b: string): number => {\n  if (!a || !b) return 0\n  if (a === b) return 1\n\n  const editDistance = distance(a, b)\n  const longestLength = Math.max(a.length, b.length)\n\n  return (longestLength - editDistance) / longestLength\n}\n\nexport default getSimilarity\n","import { ReturnTypeEnums } from '../enums/ReturnTypeEnums'\nimport { unknownReturnTypeError } from '../errors'\n\n/**\n * Generate result\n *\n * @param {Object[]|string[]} matchList - List for matching with `input`\n * @param {number[]} matchedIndexes - indexes of matchList that need to be returned as result\n * @param {ReturnTypeEnums} returnType - how the result will response to user\n * @returns {Array|null|Object|string} - matched result(s), return object if `match` is `{Object[]}`\n */\nconst resultProcessor = <T>(\n  matchList: ReadonlyArray<T>,\n  matchedIndexes: ReadonlyArray<number>,\n  returnType: ReturnTypeEnums,\n): Array<T> | T | null => {\n  switch (returnType) {\n    case ReturnTypeEnums.ALL_CLOSEST_MATCHES:\n    case ReturnTypeEnums.ALL_MATCHES:\n    case ReturnTypeEnums.ALL_SORTED_MATCHES:\n      return matchedIndexes.map((matchedIndex) => matchList[matchedIndex])\n\n    case ReturnTypeEnums.FIRST_CLOSEST_MATCH:\n    case ReturnTypeEnums.FIRST_MATCH:\n      if (!matchedIndexes.length) return null\n      return matchList[matchedIndexes[0]]\n\n    default:\n      throw unknownReturnTypeError\n  }\n}\n\nexport default resultProcessor\n"],"names":["ReturnTypeEnums","ThresholdTypeEnums","unknownReturnTypeError","Error","unknownThresholdTypeError","normalizeString","str","options","s","trimSpaces","trim","replace","deburr","caseSensitive","toLowerCase","matchItemProcessor","matchItem","matchPath","matchItemStr","length","reduce","acc","prop","getMatchItemStr","input","matchList","optionsWithDefaults","optionsWithDefaultValues","returnType","FIRST_CLOSEST_MATCH","thresholdType","SIMILARITY","EDIT_DISTANCE","threshold","fillDefaultOptions","normalizedInput","checkIfMatched","scoreProcessor","score","distance","a","b","editDistance","longestLength","Math","max","getSimilarity","matchedIndexes","matchListLen","ALL_CLOSEST_MATCHES","scores","marginValue","Infinity","i","push","scoresLen","ALL_MATCHES","ALL_SORTED_MATCHES","unsortedResults","index","sort","unsortedResult","FIRST_MATCH","map","matchedIndex","resultProcessor"],"mappings":"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"}