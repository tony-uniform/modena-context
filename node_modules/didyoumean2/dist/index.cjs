"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("fastest-levenshtein");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}const s=t(require("lodash.deburr"));var r,o;exports.ReturnTypeEnums=void 0,(r=exports.ReturnTypeEnums||(exports.ReturnTypeEnums={})).ALL_CLOSEST_MATCHES="all-closest-matches",r.ALL_MATCHES="all-matches",r.ALL_SORTED_MATCHES="all-sorted-matches",r.FIRST_CLOSEST_MATCH="first-closest-match",r.FIRST_MATCH="first-match",exports.ThresholdTypeEnums=void 0,(o=exports.ThresholdTypeEnums||(exports.ThresholdTypeEnums={})).EDIT_DISTANCE="edit-distance",o.SIMILARITY="similarity";const n=new Error("unknown returnType"),T=new Error("unknown thresholdType"),u=(e,t)=>{let r=e;return t.trimSpaces&&(r=r.trim().replace(/\s+/g," ")),t.deburr&&(r=s.default(r)),t.caseSensitive||(r=r.toLowerCase()),r},h=(e,t)=>{const{matchPath:s}=t,r=((e,t)=>{const s=t.length>0?t.reduce(((e,t)=>null==e?void 0:e[t]),e):e;return"string"!=typeof s?"":s})(e,s);return u(r,t)};exports.default=function(t,s,r){const o=(e=>{const t={caseSensitive:!1,deburr:!0,matchPath:[],returnType:exports.ReturnTypeEnums.FIRST_CLOSEST_MATCH,thresholdType:exports.ThresholdTypeEnums.SIMILARITY,trimSpaces:!0,...e};switch(t.thresholdType){case exports.ThresholdTypeEnums.EDIT_DISTANCE:return{threshold:20,...t};case exports.ThresholdTypeEnums.SIMILARITY:return{threshold:.4,...t};default:throw T}})(r),{returnType:p,threshold:c,thresholdType:a}=o,l=u(t,o);let E,S;switch(a){case exports.ThresholdTypeEnums.EDIT_DISTANCE:E=e=>e<=c,S=t=>e.distance(l,h(t,o));break;case exports.ThresholdTypeEnums.SIMILARITY:E=e=>e>=c,S=t=>((t,s)=>{if(!t||!s)return 0;if(t===s)return 1;const r=e.distance(t,s),o=Math.max(t.length,s.length);return(o-r)/o})(l,h(t,o));break;default:throw T}const d=[],i=s.length;switch(p){case exports.ReturnTypeEnums.ALL_CLOSEST_MATCHES:case exports.ReturnTypeEnums.FIRST_CLOSEST_MATCH:{const e=[];let t;switch(a){case exports.ThresholdTypeEnums.EDIT_DISTANCE:t=1/0;for(let r=0;r<i;r+=1){const o=S(s[r]);t>o&&(t=o),e.push(o)}break;case exports.ThresholdTypeEnums.SIMILARITY:t=0;for(let r=0;r<i;r+=1){const o=S(s[r]);t<o&&(t=o),e.push(o)}break;default:throw T}const r=e.length;for(let s=0;s<r;s+=1){const r=e[s];E(r)&&r===t&&d.push(s)}break}case exports.ReturnTypeEnums.ALL_MATCHES:for(let e=0;e<i;e+=1){E(S(s[e]))&&d.push(e)}break;case exports.ReturnTypeEnums.ALL_SORTED_MATCHES:{const e=[];for(let t=0;t<i;t+=1){const r=S(s[t]);E(r)&&e.push({score:r,index:t})}switch(a){case exports.ThresholdTypeEnums.EDIT_DISTANCE:e.sort(((e,t)=>e.score-t.score));break;case exports.ThresholdTypeEnums.SIMILARITY:e.sort(((e,t)=>t.score-e.score));break;default:throw T}for(const t of e)d.push(t.index);break}case exports.ReturnTypeEnums.FIRST_MATCH:for(let e=0;e<i;e+=1){if(E(S(s[e]))){d.push(e);break}}break;default:throw n}return((e,t,s)=>{switch(s){case exports.ReturnTypeEnums.ALL_CLOSEST_MATCHES:case exports.ReturnTypeEnums.ALL_MATCHES:case exports.ReturnTypeEnums.ALL_SORTED_MATCHES:return t.map((t=>e[t]));case exports.ReturnTypeEnums.FIRST_CLOSEST_MATCH:case exports.ReturnTypeEnums.FIRST_MATCH:return t.length?e[t[0]]:null;default:throw n}})(s,d,p)};
//# sourceMappingURL=index.cjs.map
