export function addTags(entry, contentTypeUid, tagsAsObject, locale) {
    if (locale === void 0) { locale = 'en-us'; }
    if (entry)
        // tslint:disable-next-line:no-string-literal
        entry["$"] = getTag(entry, contentTypeUid + "." + entry.uid + "." + locale, tagsAsObject, locale);
}
function getTag(content, prefix, tagsAsObject, locale) {
    var tags = {};
    Object.entries(content).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        switch (typeof value) {
            case "object":
                if (Array.isArray(value)) {
                    value.forEach(function (obj, index) {
                        if ((typeof obj !== 'undefined' || obj !== null) && obj._content_type_uid !== undefined && obj.uid !== undefined) {
                            // tslint:disable-next-line:no-string-literal
                            value[index]['$'] = getTag(obj, obj._content_type_uid + "." + obj.uid + "." + (obj.locale || locale), tagsAsObject, locale);
                        }
                        else {
                            if (typeof obj === "object") {
                                // tslint:disable-next-line:no-string-literal
                                obj['$'] = getTag(obj, prefix + "." + key + "." + index, tagsAsObject, locale);
                            }
                            else {
                                tags[key] = getTagsValue(prefix + "." + key, tagsAsObject);
                            }
                        }
                    });
                }
                else {
                    if (value) {
                        // tslint:disable-next-line:no-string-literal
                        value["$"] = getTag(value, prefix + "." + key, tagsAsObject, locale);
                    }
                }
                break;
            default:
                tags[key] = getTagsValue(prefix + "." + key, tagsAsObject);
        }
    });
    return tags;
}
function getTagsValue(dataValue, tagsAsObject) {
    if (tagsAsObject) {
        return { "data-cslp": dataValue };
    }
    else {
        return "data-cslp=" + dataValue;
    }
}
//# sourceMappingURL=entry-editable.js.map