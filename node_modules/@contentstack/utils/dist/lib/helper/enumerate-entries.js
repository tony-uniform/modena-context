var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { nodeToMetadata } from "../Models/metadata-model";
import MarkType from "../nodes/mark-type";
import { defaultNodeOption } from "../options/default-node-options";
import { findRenderString } from "./find-embeded-object";
export function enumerate(entries, process) {
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var entry = entries_1[_i];
        process(entry);
    }
}
export function enumerateContents(content, renderOption, renderEmbed) {
    if (!(content instanceof Array) && content.type !== 'doc') {
        return content;
    }
    if (content instanceof Array) {
        var result_1 = [];
        content.forEach(function (doc) {
            result_1.push(enumerateContents(doc, renderOption, renderEmbed));
        });
        return result_1;
    }
    var commonRenderOption = __assign(__assign({}, defaultNodeOption), renderOption);
    return nodeChildrenToHTML(content.children, commonRenderOption, renderEmbed);
}
export function textNodeToHTML(node, renderOption) {
    var text = node.text;
    if (node.superscript) {
        text = renderOption[MarkType.SUPERSCRIPT](text);
    }
    if (node.subscript) {
        text = renderOption[MarkType.SUBSCRIPT](text);
    }
    if (node.inlineCode) {
        text = renderOption[MarkType.INLINE_CODE](text);
    }
    if (node.strikethrough) {
        text = renderOption[MarkType.STRIKE_THROUGH](text);
    }
    if (node.underline) {
        text = renderOption[MarkType.UNDERLINE](text);
    }
    if (node.italic) {
        text = renderOption[MarkType.ITALIC](text);
    }
    if (node.bold) {
        text = renderOption[MarkType.BOLD](text);
    }
    return text;
}
export function referenceToHTML(node, renderOption, renderEmbed) {
    if (!renderEmbed) {
        return '';
    }
    var metadata = nodeToMetadata(node.attrs, ((node.children && node.children.length > 0) ? node.children[0] : {}));
    var item = renderEmbed(metadata);
    return findRenderString(item, metadata, renderOption);
}
function nodeChildrenToHTML(nodes, renderOption, renderEmbed) {
    return nodes.map(function (node) { return nodeToHTML(node, renderOption, renderEmbed); }).join('');
}
function nodeToHTML(node, renderOption, renderEmbed) {
    if (!node.type) {
        return textNodeToHTML(node, renderOption);
    }
    else if (node.type === 'reference') {
        return referenceToHTML(node, renderOption, renderEmbed);
    }
    else {
        var next = function (nodes) { return nodeChildrenToHTML(nodes, renderOption, renderEmbed); };
        return renderOption[node.type](node, next);
    }
}
//# sourceMappingURL=enumerate-entries.js.map