import { findRenderContent } from './helper/find-render-content';
import { findGQLEmbeddedItems } from './helper/find-embeded-object';
import { enumerate, enumerateContents } from './helper/enumerate-entries';
function jsonToHTML(option) {
    if (option.entry instanceof Array) {
        enumerate(option.entry, function (entry) {
            jsonToHTML({ entry: entry, paths: option.paths, renderOption: option.renderOption });
        });
    }
    else {
        enumerateKeys({
            entry: option.entry,
            paths: option.paths,
            renderOption: option.renderOption,
        });
    }
}
function enumerateKeys(option) {
    for (var _i = 0, _a = option.paths; _i < _a.length; _i++) {
        var key = _a[_i];
        findRenderContent(key, option.entry, (function (content) {
            if (content && content.json) {
                var edges = content.embedded_itemsConnection ? content.embedded_itemsConnection.edges : [];
                var items_1 = Object.values(edges || []).reduce(function (accumulator, value) { return accumulator.concat(value.node); }, []);
                return enumerateContents(content.json, option.renderOption, function (metadata) {
                    return findGQLEmbeddedItems(metadata, items_1)[0];
                });
            }
            return content;
        }));
    }
}
export var GQL = {
    jsonToHTML: jsonToHTML
};
//# sourceMappingURL=gql.js.map